import{_ as o,r as t,o as c,c as i,b as n,d as s,e,a as p}from"./app-ff2f634e.js";const l={},d={href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/TypeStrong/ts-node#cli-options",target:"_blank",rel:"noopener noreferrer"},u=p(`<p>启动配置必须设定请求类型，属性<code>request</code> ， 分为<code>launch</code>(启动) 和 <code>attach</code>(附加)两种 ,看下面例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token string">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span> <span class="token comment">//请求类型为启动</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token string">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attach&quot;</span>， <span class="token comment">//请求类型为附加</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="下面是launch-和-attach-类型共有的属性" tabindex="-1"><a class="header-anchor" href="#下面是launch-和-attach-类型共有的属性" aria-hidden="true">#</a> 下面是<code>launch</code> 和 <code>attach</code> 类型共有的属性：</h6><ul><li><code>protocol</code> 设置调试协议 <code>auto</code> 尝试自动检测目标运行时使用的协议 <code>inspector</code> 新的V8调试器协议，解决遗留版本的多数问题，node versions &gt;= 6.3 and Electron versions &gt;= 1.7.4. <code>legacy</code> 原始的v8调试器协议，node versions &lt; v8.0 and Electron versions &lt; 1.7.4.</li><li><code>port</code>调试使用的端口</li><li><code>address</code> TCP/IP地址，用于远程调试</li><li><code>localRoot</code> 远程调试时映射的本地地址</li><li><code>remoteRoot</code> 远程调试时的远程目录地址</li><li><code>sourceMaps</code> 默认为true</li><li><code>outFiles</code> 当map文件不在js文件同目录时用于指定 sourceMaps的位置</li><li><code>restart</code> 自动重启调试</li><li><code>timeout</code> 配置自动附加的超时时间</li><li><code>stopOnEntry</code> 自动断点到第一行代码处</li><li><code>smartStep</code> 自动跳过未映射到源代码的代码</li><li><code>skipFiles</code> :<code>[]String</code>,指定跳过单步调试的代码</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token string-literal"><span class="token string">&quot;skipFiles&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">workspaceFolder</span><span class="token punctuation">}</span></span><span class="token string">/node_modules/**/*.js&quot;</span></span><span class="token punctuation">,</span>  <span class="token comment">//跳过node_modules</span>
    <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">workspaceFolder</span><span class="token punctuation">}</span></span><span class="token string">/lib/**/*.js&quot;</span></span><span class="token punctuation">,</span><span class="token comment">//跳过lib</span>
    <span class="token string-literal"><span class="token string">&quot;&lt;node_internals&gt;/**/*.js&quot;</span></span><span class="token comment">//跳过node核心模块</span>
  <span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>trace</code>启用诊断输出</li></ul><h6 id="以下是特定于类型-launch-启动-的配置属性" tabindex="-1"><a class="header-anchor" href="#以下是特定于类型-launch-启动-的配置属性" aria-hidden="true">#</a> 以下是特定于类型 <code>launch</code>(启动)的配置属性：</h6><ul><li><code>program</code> 指定调试入口文件地址</li><li><code>args :[]String</code> 传递给程序的参数,可在<code>process.argv</code>拿到</li><li><code>cwd</code> 指定程序启动调试的目录 ,当vscode启动目录不是项目根目录，并且调试npm script时非常有用</li><li><code>runtimeExecutable</code> 设置运行时可执行文件路径，默认是<code>node</code> 可以是其他的执行程序，如<code>npm、nodemon</code></li><li><code>runtimeArgs</code> 传递给运行时可执行文件的参数,例如：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm launch app&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;runtimeArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;run-script&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;b&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">6666</span>
        <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印参数可以发现 <code>args 、runtimeArgs</code>都会传给程序，但是<code>runtimeArgs</code>参数会紧跟可执行文件</p><p><img src="https://upload-images.jianshu.io/upload_images/9766611-7ebdf11df2f70846.png?imageMogr2/auto-orient/strip|imageView2/2/w/780/format/webp" alt=""></p><p>image.png</p><ul><li><code>runtimeVersion</code> 设置运行时可执行程序的版本，如果使用<code>nvm</code>，可以切换node.js版本</li><li><code>env</code> 添加额外的环境变量</li><li><code>envFile</code> 文件加载环境变量</li><li><code>console</code> 配置终端可以是外部终端或者内部集成终端，默认值<code>internalConsole</code></li><li><code>outputCapture</code> -如果设置为std，则进程stdout / stderr的输出将显示在调试控制台中，而不是侦听调试端口上的输出。这对于直接写入stdout / stderr流而不是使用console.*API的程序或日志库很有用。</li><li><code>autoAttachChildProcesses</code> 跟踪调试对象的所有子过程，并自动附加到在调试模式下启动的子过程</li></ul><h6 id="以下是特定于类型-attach-附加-的配置属性" tabindex="-1"><a class="header-anchor" href="#以下是特定于类型-attach-附加-的配置属性" aria-hidden="true">#</a> 以下是特定于类型 <code>attach</code>(附加)的配置属性：</h6><ul><li><code>processId</code> 指定nodejs进程id,由于每次启动都会变，传入<code>&quot;\${command:PickProcess}&quot;</code></li></ul><h4 id="questions" tabindex="-1"><a class="header-anchor" href="#questions" aria-hidden="true">#</a> questions：</h4><h6 id="_1-如果使用了符号链接怎么调试" tabindex="-1"><a class="header-anchor" href="#_1-如果使用了符号链接怎么调试" aria-hidden="true">#</a> 1. 如果使用了符号链接怎么调试？</h6><p>传递参数:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;runtimeArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;--preserve-symlinks&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果主脚本也在符号链接路径里面，需要再传递一个参数<code>&quot;--preserve-symlinks-main&quot;</code>，支持的版本是 <code>Node 10+.</code></p><h6 id="_2-如何调试ecmascript模块" tabindex="-1"><a class="header-anchor" href="#_2-如何调试ecmascript模块" aria-hidden="true">#</a> 2. 如何调试ECMAScript模块？</h6><p>如果使用esm或传递<code>--experimental-modules</code>给Node.js以便使用ECMAScript模块，则可以传递这些选项通过<code>runtimeArgs</code>属性：</p>`,22),m=n("code",null,'"runtimeArgs" : ["--experimental-modules"]',-1),k={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fnodejs.org%2Fapi%2Fesm.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,'"runtimeArgs" : ["-r", "esm"]',-1),h={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fstandard-things%2Fesm",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,'["-r esm"]',-1);function q(b,_){const a=t("ExternalLinkIcon");return c(),i("div",null,[n("p",null,[n("a",d,[s("使用 Visual Studio 代码调试节点.js应用"),e(a)])]),n("p",null,[n("a",r,[s("TypeStrong/ts-node: TypeScript execution and REPL for node.js (github.com)"),e(a)]),s("   ts-node官网")]),u,n("ul",null,[n("li",null,[n("p",null,[m,s(" -使用Node v8.5.0 +中的"),n("a",k,[s("实验性ECMAScript模块支持"),e(a)])])]),n("li",null,[n("p",null,[v,s(" -使用"),n("a",h,[s("esm ES模块加载器"),e(a)]),s("（请注意，"),g,s("如果没有逗号，则无法使用）")])])])])}const j=o(l,[["render",q],["__file","VSCode launch.jsonpeizhixiangjie.html.vue"]]);export{j as default};
