import{_ as s,r as l,o as a,c as o,b as e,d as i,e as d,a as t}from"./app-ff2f634e.js";const c={},r=e("h1",{id:"一、husky",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、husky","aria-hidden":"true"},"#"),i(" 一、husky")],-1),u=e("blockquote",null,[e("p",null,"注：本文引入的 husky 都是 8.0.0 以上的版本，老版本的使用可能与下文描述的不一致！")],-1),p=e("h2",{id:"_1-husky-是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-husky-是什么","aria-hidden":"true"},"#"),i(" 1. husky 是什么？")],-1),h={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftypicode%2Fhusky",title:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"},m=e("blockquote",null,[e("p",null,[i("Modern native Git hooks made easy (轻松创建现代化的原生 git hooks) Husky improves your commits and more 🐶 "),e("em",null,"woof!")])],-1),g=e("p",null,"最重要的就是：它可以在项目中植入你设定的 git hooks，在 git 提交代码的前后，你预设的 git hooks 可以得到执行，以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交，避免了不规范的代码和 git 提交出现在项目中。",-1),v=e("blockquote",null,[e("p",null,"git hooks 是本地的，不会被同步到 git 仓库里。为了保证每个人的本地仓库都能执行预设的 git hooks，于是就有了 husky。")],-1),k=e("h2",{id:"_2-husky-的特性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-husky-的特性","aria-hidden":"true"},"#"),i(" 2. husky 的特性")],-1),b={href:"https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F%3Fid%3Dfeatures",title:"https://typicode.github.io/husky/#/?id=features",target:"_blank",rel:"noopener noreferrer"},y=t("<ul><li>零依赖，轻量级的 (6k)</li><li>由 git 的新特性提供支持</li><li>遵循关于 npm 和 Yarn 自动安装的最佳实践</li><li>提供用户友好的消息提示</li><li>提供可选的安装</li><li>husky 4 支持： <ul><li>macOS, Linux, Windows 三大操作系统</li><li>Git GUI</li><li>自定义目录</li><li>monorepo</li></ul></li></ul>",1),x={href:"https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F%3Fid%3Dfeatures",title:"https://typicode.github.io/husky/#/?id=features",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="_3-引入-husky" tabindex="-1"><a class="header-anchor" href="#_3-引入-husky" aria-hidden="true">#</a> 3. 引入 husky</h2><p>这里先介绍如何引入单独的 husky，下文会介绍如何同时引入 husky 和 lint-staged。如果你期望同时引入这两个工具，可以忽略这一小节。</p><h3 id="_3-1-空项目" tabindex="-1"><a class="header-anchor" href="#_3-1-空项目" aria-hidden="true">#</a> 3.1 空项目</h3><p>如果还没有创建项目，你可以通过以下命令中的某一条，来初始化一个带有 husky 的项目：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx husky-init               # npm
npx husky-init               # Yarn 1
yarn dlx husky-init --yarn2  # Yarn 2+
pnpm dlx husky-init          # pnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令执行完之后，只需要再执行安装依赖的命令即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install   # npm
yarn          # Yarn
pnpm install  # pnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是官方推荐的做法。如果你想在目前已有的项目中引入 husky，可参考下一节。</p><h3 id="_3-2-已有项目" tabindex="-1"><a class="header-anchor" href="#_3-2-已有项目" aria-hidden="true">#</a> 3.2 已有项目</h3><p>要想在已有的项目中使用 husky，可按如下步骤操作：</p><ol><li><p>安装 husky</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i husky -D # npm
yarn add husky -D # yarn
pnpm i husky -D # pnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启用 git hooks</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx husky install # npm
pnpx husky install # pnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>加入 husky prepare 命令</p><ul><li><p>直接在 <code>package.json</code> 的 <code>scripts</code> 里加上如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;scripts&quot;: {
    &quot;prepare&quot;: &quot;husky install&quot;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_4-husky-的使用" tabindex="-1"><a class="header-anchor" href="#_4-husky-的使用" aria-hidden="true">#</a> 4. husky 的使用</h2><p><strong>前置知识：git hooks</strong></p>`,13),f={href:"https://link.juejin.cn?target=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2F%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590",title:"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},F=t(`<ul><li>客户端 hooks <ul><li>提交工作流 <ul><li><code>pre-commit</code></li><li><code>prepare-commit-msg</code></li><li><code>commit-msg</code></li><li><code>post-commit</code></li></ul></li><li>email 工作流 <ul><li><code>applypatch-msg</code></li><li><code>pre-applypatch</code></li><li><code>post-applypatch</code></li></ul></li><li>其它 <ul><li><code>pre-rebase</code></li><li><code>post-rewrite</code></li><li><code>post-checkout</code></li><li><code>post-merge</code></li><li><code>pre-push</code></li><li><code>pre-auto-gc</code></li></ul></li></ul></li><li>服务器端 hooks <ul><li><code>pre-receive</code></li><li><code>update</code></li><li><code>post-receive</code></li></ul></li></ul><blockquote><p>注意：在客户端 hooks 中，developer 可以通过 <code>git commit -m &quot;commit message&quot; -n</code> (-n 等价于 --no-verify) 来忽略掉 <code>pre-commit</code> hook 的执行！</p></blockquote><p><strong>使用 husky</strong></p><p>使用 husky 的时候，我们通常只关注 <em>提交工作流</em> 的几个 hooks，用得最多的一个是 <code>pre-commit</code>。</p><p>使用 hosky 的时候，通常是用它来创建一系列的 git hooks，并在对应的文件中撰写 <code>shell</code> 脚本代码。</p><p>下面是官方示例中的一个，创建了 <code>pre-commit</code> hook 文件。</p><ul><li><p>创建一个 hook: <code>husky add &lt;file&gt; [cmd]</code></p><ul><li>file: 指定保存命令的文件，通常是在 <code>.husky</code> 目录下</li><li>cmd: 指定 git hooks 的名字，最常使用的是 <code>pre-commit</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 创建一个 pre-commit 的 hooks 文件
npx husky add .husky/pre-commit &quot;npm test&quot; # npm
pnpx husky add .husky/pre-commit &quot;npm test&quot; # pnpm
git add .husky/pre-commit
# 创建好这个文件之后，你就可以根据你的需要去编写这个 shell 脚本了
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="二、lint-staged" tabindex="-1"><a class="header-anchor" href="#二、lint-staged" aria-hidden="true">#</a> 二、lint-staged</h1><h2 id="_1-lint-staged-是什么" tabindex="-1"><a class="header-anchor" href="#_1-lint-staged-是什么" aria-hidden="true">#</a> 1. lint-staged 是什么？</h2><p><strong>背景</strong></p><p>随着 Web 前端开发的逐渐大前端化，Web 前端项目的体积变得越来越大，一个项目的参与者也越来越多，对代码规范、代码检查的要求越来越高。因此越来越多的项目要求 developer 在提交代码之前，必须让自己的代码通过如 ESLint, Stylelint 等代码格式化工具的格式化 (规范化)。</p><p>在起初的开发过程中，项目小，代码量少，全量跑一次 lint 的时间也相对较短。但随着项目体量的增大，全量跑一次 lint 的时间越来越长。而我们都知道，如果每一个人提交的代码都是通过了 lint 工具的格式化，那么在一次提交的时候，可能没有规范化的文件，就仅仅是当前 developer 即将提交的这些。如果在一次提交的时候，只对这一部分代码做规范化，那将大大缩短 developer 提交代码的速度，于是就诞生了一个工具：<code>lint-staged</code>。</p><p><strong>介绍</strong></p><p>通过这个工具诞生的背景，我们可以知道， <code>lint-staged</code> 是一个专门用于在通过 <code>git</code> 提交代码之前，对暂存区的代码执行一系列的格式化。当 <code>lint-staged</code> 配合 git hooks 使用时，可以在 git 提交前的 hook 中加入 <code>lint-staged</code> 命令，这样就能在提交代码之前，对即将提交的代码进行格式化，成功之后就会提交代码。</p><h2 id="_2-引入-lint-staged" tabindex="-1"><a class="header-anchor" href="#_2-引入-lint-staged" aria-hidden="true">#</a> 2. 引入 lint-staged</h2><p>直接执行下面的脚本来安装 <code>lint-staged</code> 即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i lint-staged -D # npm
yarn add lint-staged -D # yarn
pnpm i lint-staged -D # pnpm
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-lint-staged-的使用" tabindex="-1"><a class="header-anchor" href="#_3-lint-staged-的使用" aria-hidden="true">#</a> 3. lint-staged 的使用</h2><p>配置方式：</p><ul><li><code>package.json</code> 中的 <code>lint-staged</code> 配置项</li><li>JSON 风格或 YML 风格的 <code>.lintstagedrc</code><ul><li><code>.lintstagedrc.json</code></li><li><code>.lintstagedrc.yaml</code></li><li><code>.lintstagedrc.yml</code></li></ul></li><li><code>.lintstagedrc.mjs</code> 或 <code>.lintstagedrc.config.mjs</code></li><li><code>.lintstagedrc.cjs</code> 或 <code>.lintstagedrc.config.cjs</code></li><li><code>lint-staged.js</code> 或 <code>lint-staged.config.js</code></li></ul><p>以 <code>package.json</code> 为例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;lint-staged&quot;: {
    &quot;&lt;glob-pattern&gt;&quot;: &lt;command&gt;
  }
}
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>&lt;command&gt;</code> 可以是单个命令的字符串，也可以多个命令组成的数组。使用 js 作为配置文件时，还可以是导出一个如下类型的函数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> (filenames: string[]) =&gt; string | string[] | Promise&lt;string | string[]&gt;
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>虽然配置好了 <code>lint-staged</code>，但目前还不能自动地使用它，因为通常它是放在 Git 的 pre-commit 阶段去执行，因此要在 <em>.husky/pre-commit</em> 文件中增加执行 <code>lint-staged</code> 的命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 如果使用的是 npm/yarn 且 npm 版本为 v8 及以下，就加下面的命令
npx lint-staged
 # 如果使用的是 npm/yarn 且 npm 版本为 v9 及以上，就加下面的命令
npm exec lint-staged
 # 如果使用的是 pnpm，就加下面的命令
pnpm exec lint-staged
 # ! 注意，上面的这三个命令必须根据实际情况来选择，且只能存在一个

复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、安装-husky-与-lint-staged-命令" tabindex="-1"><a class="header-anchor" href="#三、安装-husky-与-lint-staged-命令" aria-hidden="true">#</a> 三、安装 husky 与 lint-staged 命令</h1><h2 id="注-版本更新" tabindex="-1"><a class="header-anchor" href="#注-版本更新" aria-hidden="true">#</a> 注：版本更新</h2><p>版本更新后，直接执行命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx mrm@2 lint-staged # npm/yarn
pnpx mrm@2 lint-staged # pnpm
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时，只会补充 <code>husky</code> 和 <code>lint-staged</code> 的命令，不再安装这两个依赖。</p><p>因此如果想同时集成这两个依赖，还需在上述命令执行完之前，先执行如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i husky lint-staged -D # npm
yarn add husky lint-staged -D # yarn
pnpm i husky lint-staged -D # pnpm
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-1-集成方式" tabindex="-1"><a class="header-anchor" href="#_3-1-集成方式" aria-hidden="true">#</a> 3.1 集成方式</h2><p>二者的官方都推荐了使用 <code>mrm</code> 这个库来同时集成 husky 和 lint-staged。</p><p>在你的项目根目录下，直接执行如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx mrm@2 lint-staged # npm/yarn
pnpx mrm@2 lint-staged # pnpm
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令之后，你就会看到你的 <code>package.json</code> 里多了一个 <code>lint-staged</code> 配置项，且根目录下多了一个 <code>.husky</code> 目录，里面就包含了 <em>pre-commit</em> 文件，里面包含了一个最基础的命令：<code>npx lint-staged</code>。</p><p>在后续的开发工作中，任何需要在 pre-commit 阶段执行的命令，都可以添加到 <em>.husky/pre-commit</em> 文件中。</p><h1 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h1>`,39),j={href:"https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F",title:"https://typicode.github.io/husky/#/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fokonet%2Flint-staged%23readme",title:"https://github.com/okonet/lint-staged#readme",target:"_blank",rel:"noopener noreferrer"},A=e("em",null,".husky",-1),E=e("code",null,"package.json",-1),D=e("em",null,"lint-staged",-1),G=t('<p>在 <em>.husky/pre-commit</em> 文件中存在</p><h2 id="附-npx-查找规则" tabindex="-1"><a class="header-anchor" href="#附-npx-查找规则" aria-hidden="true">#</a> 附：npx 查找规则</h2><ol><li>去 <code>/node_modules/.bin</code> 目录下查找是否存在对应的命令，如果没有找到则执行第 2 步；</li><li>去查找全局安装的命令里是否有对应的命令，如果没有找到则执行第 3 步；</li><li>创建一个临时目录，下载命令对应的依赖，然后执行这个命令，完成之后就删除这个临时目录。</li></ol><p>了解了这个规则之后，就可以放心地使用 <code>npx</code> 来执行一些命令了。如果期望项目里的命令在每一个 developer 那里都能有相同的表现，墙裂建议在项目内统一安装对应的 dependency。</p>',4);function z(S,B){const n=l("ExternalLinkIcon");return a(),o("div",null,[r,u,p,e("p",null,[i("husky 的 "),e("a",h,[i("README"),d(n)]),i(" 开篇是这么描述的：")]),m,g,v,k,e("p",null,[i("husky 的 "),e("a",b,[i("官方文档"),d(n)]),i(" 是这么描述的 (直译)：")]),y,e("p",null,[e("a",x,[i("官方文档"),d(n)]),i(" 列举了非常多牛X轰轰的项目在使用 husky。")]),_,e("p",null,[e("a",f,[i("git hooks"),d(n)]),i(" 的分类如下")]),F,e("p",null,[i("本文详细介绍了 "),e("a",j,[i("husky"),d(n)]),i(" 和 "),e("a",q,[i("lint-staged"),d(n)]),i(" 的集成。成功集成这两个工具之后，在项目根目录下会多出 "),A,i(" 目录，在 "),E,i(" 中会多出 "),D,i(" 配置项。")]),G])}const N=s(c,[["render",z],["__file","husky yu lint-stagedanzhuangyupeizhi.html.vue"]]);export{N as default};
