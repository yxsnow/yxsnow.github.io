import{_ as t,o as e,c,a as i}from"./app-ff2f634e.js";const p={},o=i("<p>git add .</p><p>git commit -m &#39;first commit&#39;</p><p>git push</p><p>git reset --hard HEAD^</p><p>git reset --hard commit_id</p><p>git checkout --file  把该文件在工作区的修改全部取消</p><p>git reset HEAD file  把文件暂存区的修改回退到工作区</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>因此，多人协作的工作模式通常是这样：</p><ol><li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p></li><li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p></li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><p>git push &lt;remote 名字&gt; &lt;本地分支的名字&gt; : &lt;远程库的名字&gt;</p><p>git push origin HEAD:refs/for/master</p><p>git push 肯定是推送</p><p>origin : 是远程的库的名字</p><p>HEAD: 是一个特别的指针，它是一个指向你正在工作的本地分支的指针，可以把它当做本地分支的别名，git这样就可以知道你工作在哪个分支</p><p>refs/for :意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的</p><p>refs/heads 不需要</p>",24),g=[o];function r(d,n){return e(),c("div",null,g)}const l=t(p,[["render",r],["__file","gitxuexi.html.vue"]]);export{l as default};
