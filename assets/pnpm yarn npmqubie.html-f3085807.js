import{_ as p,r as o,o as t,c as r,b as n,d as l,e as s}from"./app-ff2f634e.js";const _={},a=n("p",null,[n("strong",null,"pnpm、yarn和npm的区别")],-1),m=n("p",null,"pnpm、yarn和npm都是现代的JavaScript包管理器，其中npm是最早出现的并且是最为广泛使用的一个。但是，pnpm和yarn也因为其独特的功能而受到开发人员的欢迎。",-1),c=n("p",null,[n("strong",null,"依赖管理方式不同：")],-1),u={href:"https://juejin.cn/post/7095645259677302815",target:"_blank",rel:"noopener noreferrer"},i=n("li",null,[n("p",null,[n("strong",null,"性能方面表现不同：")]),n("p",null,"pnpm被认为是最快的包管理器之一，因为它能够重复使用缓存以及减少磁盘空间的使用。yarn也被认为比npm快，尤其是在安装大型依赖时。然而，与pnpm相比，yarn仍然需要大量的磁盘空间来存储所有的依赖项。而npm在这方面相对滞后。")],-1),d=n("li",null,[n("p",null,[n("strong",null,"支持离线模式的能力不同：")]),n("p",null,"像npm一样，yarn使用本地缓存，并提供了离线模式。这个功能在2012年的npm项目中就被提出来过，但一直没有实现。而pnpm也支持离线模式，但是需要手动配置。")],-1),h=n("li",null,[n("p",null,[n("strong",null,"社区支持度不同：")]),n("p",null,"由于npm使用最广泛，因此它有最大的社区支持。yarn也有很好的社区支持，但pnpm相对来说还是比较小众的。")],-1),y=n("p",null,"综上所述，虽然三者都有自己的优势和特点，但在具体项目选择一个合适的包管理器需要根据项目本身的情况来做具体的考虑。",-1);function f(g,x){const e=o("ExternalLinkIcon");return t(),r("div",null,[a,m,n("ol",null,[n("li",null,[c,n("p",null,[l("npm和yarn都采用的是将所有依赖项下载到本地node_modules目录，并存储在项目文件夹中。而pnpm的方式是100个项目用到一个依赖，他会将不同项目中的版本之间的差异存储在本地类似中央仓库的样子，这样一个依赖包假设有50个文件，两个同依赖但不同版本不会全部修改，只会更改如1个文件的形式，比较完美的解决npm和pnpm的两个缺点。["),n("a",u,[l("1"),s(e)]),l("]")])]),i,d,h]),y])}const b=p(_,[["render",f],["__file","pnpm yarn npmqubie.html.vue"]]);export{b as default};
