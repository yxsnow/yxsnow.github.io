import{_ as n,o as s,c as a,a as p}from"./app-ff2f634e.js";const t={},o=p(`<blockquote><p>JS数组的排序方法大家肯定用的太多了，那sort用的是什么排序算法呢？这个问题的答案我寻找了很久，最终在Chrome V8引擎的源码中找到了。</p></blockquote><p>说明一下，ECMAScript没有定义使用哪种排序算法，各个浏览器的实现方式会有不同。==火狐中使用的是归并排序，==下面是Chrome的sort排序算法的实现。</p><h5 id="sort方法源码" tabindex="-1"><a class="header-anchor" href="#sort方法源码" aria-hidden="true">#</a> sort方法源码</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">DEFINE_METHOD</span><span class="token punctuation">(</span>
  GlobalArray<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
  <span class="token function">sort</span><span class="token punctuation">(</span>comparefn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">CHECK_OBJECT_COERCIBLE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Array.prototype.sort&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_UNDEFINED</span><span class="token punctuation">(</span>comparefn<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IS_CALLABLE</span><span class="token punctuation">(</span>comparefn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token operator">%</span><span class="token function">make_type_error</span><span class="token punctuation">(</span>kBadSortComparisonFunction<span class="token punctuation">,</span> comparefn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token function">TO_OBJECT</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token function">TO_LENGTH</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">InnerArraySort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">,</span> comparefn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步看出sort方法调用了<em>InnerArraySort</em>方法，参数是数组，数组长度，比较函数。再看看<em>InnerArraySort</em>方法是如何处理的。</p><h5 id="innerarraysort方法源码" tabindex="-1"><a class="header-anchor" href="#innerarraysort方法源码" aria-hidden="true">#</a> InnerArraySort方法源码</h5><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">InnerArraySort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">,</span> comparefn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// In-place QuickSort algorithm.</span>
  <span class="token comment">// For short (length &lt;= 10) arrays, insertion sort is used for efficiency.</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">IS_CALLABLE</span><span class="token punctuation">(</span>comparefn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">comparefn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">_IsSmi</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">%</span><span class="token function">_IsSmi</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">%</span><span class="token function">SmiLexicographicCompare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      x <span class="token operator">=</span> <span class="token constant">TO_STRING</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      y <span class="token operator">=</span> <span class="token constant">TO_STRING</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">InsertionSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token operator">...</span>
  <span class="token keyword">function</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> third_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Insertion sort is faster for short arrays.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">InsertionSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        third_index <span class="token operator">=</span> <span class="token function">GetThirdIndex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        third_index <span class="token operator">=</span> from <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// Find a pivot as the median of first, last and middle element.</span>
      <span class="token keyword">var</span> v0 <span class="token operator">=</span> a<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> v1 <span class="token operator">=</span> a<span class="token punctuation">[</span>to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> v2 <span class="token operator">=</span> a<span class="token punctuation">[</span>third_index<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> c01 <span class="token operator">=</span> <span class="token function">comparefn</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c01 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// v1 &lt; v0, so swap them.</span>
        <span class="token keyword">var</span> tmp <span class="token operator">=</span> v0<span class="token punctuation">;</span>
        v0 <span class="token operator">=</span> v1<span class="token punctuation">;</span>
        v1 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token comment">// v0 &lt;= v1.</span>
      <span class="token keyword">var</span> c02 <span class="token operator">=</span> <span class="token function">comparefn</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c02 <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// v2 &lt;= v0 &lt;= v1.</span>
        <span class="token keyword">var</span> tmp <span class="token operator">=</span> v0<span class="token punctuation">;</span>
        v0 <span class="token operator">=</span> v2<span class="token punctuation">;</span>
        v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span>
        v1 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// v0 &lt;= v1 &amp;&amp; v0 &lt; v2</span>
        <span class="token keyword">var</span> c12 <span class="token operator">=</span> <span class="token function">comparefn</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c12 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// v0 &lt;= v2 &lt; v1</span>
          <span class="token keyword">var</span> tmp <span class="token operator">=</span> v1<span class="token punctuation">;</span>
          v1 <span class="token operator">=</span> v2<span class="token punctuation">;</span>
          v2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// v0 &lt;= v1 &lt;= v2</span>
      a<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span>
      a<span class="token punctuation">[</span>to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>
      <span class="token keyword">var</span> pivot <span class="token operator">=</span> v1<span class="token punctuation">;</span>
      <span class="token keyword">var</span> low_end <span class="token operator">=</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// Upper bound of elements lower than pivot.</span>
      <span class="token keyword">var</span> high_start <span class="token operator">=</span> to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// Lower bound of elements greater than pivot.</span>
      a<span class="token punctuation">[</span>third_index<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span><span class="token punctuation">;</span>
      a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>

      <span class="token comment">// From low_end to i are elements equal to pivot.</span>
      <span class="token comment">// From i to high_start are elements that haven&#39;t been compared yet.</span>
      partition<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> low_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> high_start<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> element <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> order <span class="token operator">=</span> <span class="token function">comparefn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span><span class="token punctuation">;</span>
          a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
          low_end<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">do</span> <span class="token punctuation">{</span>
            high_start<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>high_start <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">break</span> partition<span class="token punctuation">;</span>
            <span class="token keyword">var</span> top_elem <span class="token operator">=</span> a<span class="token punctuation">[</span>high_start<span class="token punctuation">]</span><span class="token punctuation">;</span>
            order <span class="token operator">=</span> <span class="token function">comparefn</span><span class="token punctuation">(</span>top_elem<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>order <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high_start<span class="token punctuation">]</span><span class="token punctuation">;</span>
          a<span class="token punctuation">[</span>high_start<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            element <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>low_end<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
            low_end<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">-</span> high_start <span class="token operator">&lt;</span> low_end <span class="token operator">-</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> high_start<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
        to <span class="token operator">=</span> low_end<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> from<span class="token punctuation">,</span> low_end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        from <span class="token operator">=</span> high_start<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token operator">...</span>

  <span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num_non_undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">...</span>
  <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步最重要的是<em>QuickSort</em>，从代码和注释中可以看出**==sort使用的是插入排序和快速排序结合的排序算法。**数组长度不超过10时，使用插入排序。长度超过10使用快速排序==。在数组较短时插入排序更有效率。</p>`,8),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","JS-shuzusortfangfayongdeshinazhongpaixusuanfa.html.vue"]]);export{r as default};
