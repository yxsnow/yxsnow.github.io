import{_ as e,r as o,o as c,c as l,b as n,d as s,e as t,a as p}from"./app-ff2f634e.js";const i="/assets/1460000038251171_45e1268973704e6bb62a78cab4c37c2c-85282796.png",u="/assets/1460000038251170_f0772a8b04db422b9d11c6ed56c96ca8-827fcc1f.png",r="/assets/1460000038251169_3b5e1bfed92c448c8c6efb454ba8da7a-89461eb0.png",k="/assets/1460000038251168_c9074c0c5d644743942a598f6aafff7f-7fbda5ab.png",d="/assets/1460000038251167_2b8189124a3e489f94a0e8927e91f44b-dcc99932.png",v="/assets/1460000038251166_5562a42bdd3740569d4e822966bb250a-620e1992.png",m={},b=p('<blockquote><p>React 是一个 Facebook 开源的，用于构建用户界面的 JavaScript 库。</p></blockquote><p>React 目的在于解决：构建随着时间数据不断变化的大规模应用程序。 其中 React 合成事件是较为重要的知识点，阅读完本文，你将收获：</p><ol><li>合成事件的概念和作用；</li><li>合成事件与原生事件的 3 个区别；</li><li>合成事件与原生事件的执行顺序；</li><li>合成事件的事件池；</li><li>合成事件 4 个常见问题。</li></ol><p>接下来和我一起开始学习吧~</p><h2 id="一、概念介绍" tabindex="-1"><a class="header-anchor" href="#一、概念介绍" aria-hidden="true">#</a> 一、概念介绍</h2>',5),g=n("strong",null,"模拟原生 DOM 事件所有能力的一个事件对象",-1),h={href:"https://link.segmentfault.com/?enc=h5Ixv%2BxYHq%2FbaXDf%2Bun9%2BA%3D%3D.59%2FycD3yNleRjXQKEdqi%2B8g4NXNO4KOBgnrBend1xpV6KVVwdblZEDsK2cSlCNGX",target:"_blank",rel:"noopener noreferrer"},f=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Leo 按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 React 中，所有事件都是合成的，不是原生 DOM 事件，但可以通过 <code>e.nativeEvent</code> 属性获取 DOM 事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Leo 按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>学习一个新知识的时候，一定要知道为什么会出现这个技术。 那么 React 为什么使用合成事件？其主要有三个目的：</p><ol><li>进行浏览器兼容，实现更好的跨平台</li></ol><p>React 采用的是顶层事件代理机制，能够保证冒泡一致性，可以跨浏览器执行。React 提供的合成事件用来抹平不同浏览器事件对象之间的差异，将不同平台事件模拟合成事件。</p><ol><li>避免垃圾回收</li></ol><p>事件对象可能会被频繁创建和回收，因此 React 引入<strong>事件池</strong>，在事件池中获取或释放事件对象。<strong>即 React 事件对象不会被释放掉，而是存放进一个数组中，当事件触发，就从这个数组中弹出，避免频繁地去创建和销毁(垃圾回收)</strong>。</p><ol><li>方便事件统一管理和事务机制</li></ol>`,9),y={href:"https://link.segmentfault.com/?enc=OwrkOWjPrfi2toMTAQLWBw%3D%3D.6PQKXVVM1wytLOY7SlMaDg9vZwFU%2BwvZBnlWjU8ymRy8ln%2F%2BA%2B5ziLx4ZBL7IPBNMW5laZ9XuLv9IBG4eWX2NZZJHiGifr64GHpasTOf2Xdrbaw2Kk%2FpxNnqx9lRZ7ZbjLWKWf4Oubui13pbQ2fhrtmR75pDKZ7CgysQbjNa%2Bd0%3D",target:"_blank",rel:"noopener noreferrer"},_=p('<h2 id="二、原生事件回顾" tabindex="-1"><a class="header-anchor" href="#二、原生事件回顾" aria-hidden="true">#</a> 二、原生事件回顾</h2><p>在开始介绍 React 合成事件之前，我们先简单回顾 JavaScript 原生事件中几个重要知识点： <img width="730" height="505" src="'+i+`"></p><h3 id="_1-事件捕获" tabindex="-1"><a class="header-anchor" href="#_1-事件捕获" aria-hidden="true">#</a> 1. 事件捕获</h3><p>当某个元素触发某个事件（如 <code>onclick</code> ），顶层对象 <code>document</code> 就会发出一个事件流，随着 DOM 树的节点向目标元素节点流去，<strong>直到到达事件真正发生的目标元素</strong>。在这个过程中，事件相应的监听函数是不会被触发的。</p><h3 id="_2-事件目标" tabindex="-1"><a class="header-anchor" href="#_2-事件目标" aria-hidden="true">#</a> 2. 事件目标</h3><p>当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</p><h3 id="_3-事件冒泡" tabindex="-1"><a class="header-anchor" href="#_3-事件冒泡" aria-hidden="true">#</a> 3. 事件冒泡</h3><p>从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的事件处理函数，这些函数都会被触发一次。如果想阻止事件起泡，可以使用 <code>e.stopPropagation()</code> 或者 <code>e.cancelBubble=true</code>（IE）来阻止事件的冒泡传播。</p><h3 id="_4-事件委托-事件代理" tabindex="-1"><a class="header-anchor" href="#_4-事件委托-事件代理" aria-hidden="true">#</a> 4. 事件委托/事件代理</h3><p>简单理解就是<strong>将一个响应事件委托到另一个元素</strong>。 当子节点被点击时，<code>click</code> 事件向上冒泡，父节点捕获到事件后，我们判断是否为所需的节点，然后进行处理。其优点在于<strong>减少内存消耗和动态绑定事件</strong>。</p><h2 id="二、合成事件与原生事件区别" tabindex="-1"><a class="header-anchor" href="#二、合成事件与原生事件区别" aria-hidden="true">#</a> 二、合成事件与原生事件区别</h2><p>React 事件与原生事件很相似，但不完全相同。这里列举几个常见区别：</p><h3 id="_1-事件名称命名方式不同" tabindex="-1"><a class="header-anchor" href="#_1-事件名称命名方式不同" aria-hidden="true">#</a> 1. 事件名称命名方式不同</h3><p>原生事件命名为纯小写（onclick, onblur），而 React 事件命名采用<strong>小驼峰式</strong>（camelCase），如 <code>onClick</code> 等：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原生事件绑定方式</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;handleClick()&quot;</span><span class="token operator">&gt;</span>Leo 按钮命名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      
<span class="token comment">// React 合成事件绑定方式</span>
<span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Leo 按钮命名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-事件处理函数写法不同" tabindex="-1"><a class="header-anchor" href="#_2-事件处理函数写法不同" aria-hidden="true">#</a> 2. 事件处理函数写法不同</h3><p>原生事件中事件处理函数为字符串，在 React JSX 语法中，传入一个<strong>函数</strong>作为事件处理函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原生事件 事件处理函数写法</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;handleClick()&quot;</span><span class="token operator">&gt;</span>Leo 按钮命名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      
<span class="token comment">// React 合成事件 事件处理函数写法</span>
<span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Leo 按钮命名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-阻止默认行为方式不同" tabindex="-1"><a class="header-anchor" href="#_3-阻止默认行为方式不同" aria-hidden="true">#</a> 3. 阻止默认行为方式不同</h3><p>在原生事件中，可以通过返回 <code>false</code> 方式来阻止默认行为，但是在 React 中，需要显式使用 <code>preventDefault()</code> 方法来阻止。 这里以阻止 <code>&lt;a&gt;</code> 标签默认打开新页面为例，介绍两种事件区别：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原生事件阻止默认行为方式</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://www.pingan8787.com&quot;</span> 
  onclick<span class="token operator">=</span><span class="token string">&quot;console.log(&#39;Leo 阻止原生事件~&#39;); return false&quot;</span>
<span class="token operator">&gt;</span>
  Leo 阻止原生事件
<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

<span class="token comment">// React 事件阻止默认行为方式</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Leo 阻止原生事件~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clickElement <span class="token operator">=</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://www.pingan8787.com&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>
  Leo 阻止原生事件
<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>小结前面几点区别：</p><table><thead><tr><th></th><th>原生事件</th><th>React 事件</th></tr></thead><tbody><tr><td>事件名称命名方式</td><td>名称全部小写&lt;br/&gt;（onclick, onblur）</td><td>名称采用小驼峰&lt;br/&gt;（onClick, onBlur）</td></tr><tr><td>事件处理函数语法</td><td>字符串</td><td>函数</td></tr><tr><td>阻止默认行为方式</td><td>事件返回 <code>false</code></td><td>使用 <code>e.preventDefault()</code> 方法</td></tr></tbody></table><p><img src="`+u+'" alt="Native-Event-VS-Synthetic-Event.png" title="Native-Event-VS-Synthetic-Event.png"></p><h2 id="三、react-事件与原生事件执行顺序" tabindex="-1"><a class="header-anchor" href="#三、react-事件与原生事件执行顺序" aria-hidden="true">#</a> 三、React 事件与原生事件执行顺序</h2>',26),R={href:"https://link.segmentfault.com/?enc=WKOkfFHFjlOdDSPkFkwm5A%3D%3D.o6Z67yJtTrBWxtunP1i21zPYtX3LVTN3T6MrDMDyqK8J6YehwRvTSqmcKuUyOxjC",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">parentRef</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
  <span class="token literal-property property">childRef</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>childRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React componentDidMount！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原生事件：父元素 DOM 事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>childRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原生事件：子元素 DOM 事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原生事件：document DOM 事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">parentClickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React 事件：父元素事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function-variable function">childClickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React 事件：子元素事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentClickFun<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>childRef<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>childClickFun<span class="token punctuation">}</span><span class="token operator">&gt;</span>
          分析事件执行顺序
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发事件后，可以看到控制台输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>原生事件：子元素 <span class="token constant">DOM</span> 事件监听！ 
原生事件：父元素 <span class="token constant">DOM</span> 事件监听！ 
React 事件：子元素事件监听！ 
React 事件：父元素事件监听！ 
原生事件：document <span class="token constant">DOM</span> 事件监听！ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面流程，我们可以理解：</p><ul><li>React 所有事件都挂载在 <code>document</code> 对象上；</li><li>当真实 DOM 元素触发事件，会冒泡到 <code>document</code> 对象后，再处理 React 事件；</li><li>所以会先执行原生事件，然后处理 React 事件；</li><li>最后真正执行 <code>document</code> 上挂载的事件。</li></ul><p><img src="`+r+'" alt="Native-Event-And-Synthetic-Event.png" title="Native-Event-And-Synthetic-Event.png"></p><h2 id="四、合成事件的事件池" tabindex="-1"><a class="header-anchor" href="#四、合成事件的事件池" aria-hidden="true">#</a> 四、合成事件的事件池**</h2><h3 id="_1-事件池介绍" tabindex="-1"><a class="header-anchor" href="#_1-事件池介绍" aria-hidden="true">#</a> 1. 事件池介绍</h3><p>合成事件对象池，是 React 事件系统提供的一种<strong>性能优化方式</strong>。<strong>合成事件对象在事件池统一管理</strong>，<strong>不同类型的合成事件具有不同的事件池</strong>。</p><ul><li>当事件池未满时，React 创建新的事件对象，派发给组件。</li><li>当事件池装满时，React 从事件池中复用事件对象，派发给组件。</li></ul><p>关于“事件池是如何工作”的问题，可以看看下面图片：</p><p><img src="'+k+'" alt="Synthetic-Event-Loop.png" title="Synthetic-Event-Loop.png"></p>',12),q={href:"https://link.segmentfault.com/?enc=2ePmKMQa91rN04UdlpJZkg%3D%3D.DWmXW5XPiu3aqffA1T6aXR94dm%2B%2Bp%2Bfc6WqvojYfwBlax8nLQbn2OfMuIFy3ekyA",target:"_blank",rel:"noopener noreferrer"},x=p(`<h3 id="_2-事件池分析-react-16-版本" tabindex="-1"><a class="header-anchor" href="#_2-事件池分析-react-16-版本" aria-hidden="true">#</a> 2. 事件池分析（React 16 版本）</h3><p><strong>React 事件池仅支持在 React 16 及更早版本中，在 React 17 已经不使用事件池</strong>。 下面以 React 16 版本为例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务 e.target：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务：e：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span><span class="token operator">&gt;</span>测试事件池<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出： <img src="`+d+`" alt="Synthetic-Event-React16.png" title="Synthetic-Event-React16.png"></p><p>在 React 16 及之前的版本，合成事件对象的事件处理函数全部被调用之后，所有属性都会被置为 <code>null</code> 。这时，如果我们需要在事件处理函数运行之后获取事件对象的属性，可以使用 React 提供的 <code>e.persist()</code> 方法，保留所有属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只修改 handleChange 方法，其他不变</span>
<span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 只增加 persist() 执行</span>
  e<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务 e.target：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务：e：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看下结果：</p><p><img src="`+v+`" alt="Synthetic-Event-React17.png" title="Synthetic-Event-React17.png"></p><h3 id="_3-事件池分析-react-17-版本" tabindex="-1"><a class="header-anchor" href="#_3-事件池分析-react-17-版本" aria-hidden="true">#</a> 3. 事件池分析（React 17 版本）</h3><p>由于 Web 端的 React 17 不使用事件池，所有不会存在上述“所有属性都会被置为 <code>null</code>”的问题。</p><h2 id="五、常见问题" tabindex="-1"><a class="header-anchor" href="#五、常见问题" aria-hidden="true">#</a> 五、常见问题</h2><h3 id="_1-react-事件中-this-指向问题" tabindex="-1"><a class="header-anchor" href="#_1-react-事件中-this-指向问题" aria-hidden="true">#</a> 1. React 事件中 this 指向问题</h3><p>在 React 中，JSX 回调函数中的 this 经常会出问题，在 Class 中方法不会默认绑定 this，就会出现下面情况， <code>this.funName</code> 值为 <code>undefined</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">childClickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React 事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">clickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React this 指向问题&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childClickFun<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickFun<span class="token punctuation">}</span><span class="token operator">&gt;</span>React <span class="token keyword">this</span> 指向问题<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们有 2 种方式解决这个问题：</p><ol><li>使用 <code>bind</code> 方法绑定 <code>this</code> ：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clickFun <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 省略其他代码</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>将需要使用 <code>this</code> 的方法改写为使用<strong>箭头函数</strong>定义：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">clickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React this 指向问题&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childClickFun<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 省略其他代码</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在回调函数中使用<strong>箭头函数</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略其他代码</span>
  <span class="token function">clickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;React this 指向问题&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childClickFun<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>React <span class="token keyword">this</span> 指向问题<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-向事件传递参数问题" tabindex="-1"><a class="header-anchor" href="#_2-向事件传递参数问题" aria-hidden="true">#</a> 2. 向事件传递参数问题</h3><p>经常在遍历列表时，需要向事件传递额外参数，如 <code>id</code> 等，来指定需要操作的数据，在 React 中，可以使用 2 种方式向事件传参：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略其他代码</span>
  <span class="token function">clickFun</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前点击：&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>第一种：通过 bind 绑定 <span class="token keyword">this</span> 传参<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>
              List<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>按钮：<span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>第二种：通过箭头函数绑定 <span class="token keyword">this</span> 传参<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>
              List<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickFun</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>按钮：<span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方式是等价的：</p><ul><li>第一种通过 <code>Function.prototype.bind</code> 实现；</li><li>第二种通过<strong>箭头函数</strong>实现。</li></ul><h3 id="_3-合成事件阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_3-合成事件阻止冒泡" aria-hidden="true">#</a> 3. 合成事件阻止冒泡</h3><p>官网文档描述了：</p><blockquote><p>从 v0.14 开始，事件处理器返回 false 时，不再阻止事件传递。你可以酌情手动调用 e.stopPropagation() 或 e.preventDefault() 作为替代方案。</p></blockquote>`,29),D=n("code",null,"e.stopPropagation()",-1),C=n("code",null,"e.preventDefault()",-1),j={href:"https://link.segmentfault.com/?enc=aK%2BQv57xJNrgEZxGozKSig%3D%3D.T4d9slHrtxTVqiReItPws2gKK10uh3FRmJStMh45G9qpJCtPWC99KnnT9J33iAK1jkB0JWJHcA4efKNgzxRDPDfXhke6UxGqm3bm6lXLNxs%3D",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"e.nativeEvent.stopImmediatePropagation()",-1),E=p(`<h4 id="_3-1-e-stoppropagation" tabindex="-1"><a class="header-anchor" href="#_3-1-e-stoppropagation" aria-hidden="true">#</a> 3.1 e.stopPropagation</h4><p>对于开发者来说，更希望使用 <code>e.stopPropagation()</code> 方法来阻止当前 DOM 事件冒泡，但事实上，从前两节介绍的执行顺序可知，<code>e.stopPropagation()</code> 只能阻止合成事件间冒泡，即下层的合成事件，不会冒泡到上层的合成事件。事件本身还都是在 document 上执行。所以<strong>最多只能阻止 document 事件不能再冒泡到 window 上。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  parentRef<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  childRef<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;阻止原生事件冒泡~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原生事件：document DOM 事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">parentClickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;阻止合成事件冒泡~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentClickFun<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        点击测试“合成事件和原生事件是否可以混用”
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>阻止原生事件冒泡<span class="token operator">~</span> 
阻止合成事件冒泡<span class="token operator">~</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-e-nativeevent-stopimmediatepropagation" tabindex="-1"><a class="header-anchor" href="#_3-2-e-nativeevent-stopimmediatepropagation" aria-hidden="true">#</a> 3.2 e.nativeEvent.stopImmediatePropagation</h4>`,6),B=n("strong",null,"阻止监听同一事件的其他事件监听器被调用",-1),L=n("code",null,"stopImmediatePropagation",-1),A={href:"https://link.segmentfault.com/?enc=ptIdN1RW0%2FOFP6uxRsr%2FWA%3D%3D.VooQZc3TGvUQk%2Bgykt1TiHnrEk9vQ7ctN5oJDWrkQKts%2BkXf2ay7O5WlglMkxg4OeI%2BmtWChcalQEWRx6pYHqCTPvGRaDmvXUxjKBtNqbQo%3D",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"e.nativeEvent.stopImmediatePropagation()",-1),S=n("strong",null,"阻止合成事件不会冒泡到 document 上",-1),O=p(`<p>举一个实际案例：实现点击空白处关闭菜单的功能： 当菜单打开时，在 document 上动态注册事件，用来关闭菜单。</p><ul><li>点击菜单内部，由于不冒泡，会正常执行菜单点击。</li><li>点击菜单外部，执行document上事件，关闭菜单。</li></ul><p>在菜单关闭的一刻，在 document 上移除该事件，这样就不会重复执行该事件，浪费性能，也可以在 window 上注册事件，这样可以避开 document。 **</p><h3 id="_4-合成事件和原生事件是否可以混用" tabindex="-1"><a class="header-anchor" href="#_4-合成事件和原生事件是否可以混用" aria-hidden="true">#</a> 4. 合成事件和原生事件是否可以混用</h3><p><strong>合成事件和原生事件最好不要混用</strong>。 原生事件中如果执行了<code>stopPropagation</code>方法，则会导致其他<code>React</code>事件失效。因为所有元素的事件将无法冒泡到<code>document</code>上。 通过前面介绍的两者事件执行顺序来看，所有的 React 事件都将无法被注册。通过代码一起看看：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  parentRef<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  childRef<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;阻止原生事件冒泡~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;原生事件：document DOM 事件监听！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">parentClickFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;阻止合成事件冒泡~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentRef<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentClickFun<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        点击测试“合成事件和原生事件是否可以混用”
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>阻止原生事件冒泡<span class="token operator">~</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),P={href:"https://link.segmentfault.com/?enc=3HUGTt%2FsPIDQwC1HjI4wXg%3D%3D.8nUUD7U5FJUHTsnPo9SX9VBDWRKxK8Y1DCdbbS99fhTDXGtqqjekhCeYX4hQ7US6",target:"_blank",rel:"noopener noreferrer"},N={href:"https://link.segmentfault.com/?enc=RubB5GuGDFQUM91f7V6ahA%3D%3D.rxm0%2BAZZAkYb0%2F9Zogt2dAzYeGDxDXFRMW2nxIdSsdezslbwbm%2B5mi40kEEMKAuHS%2BStb8hRV0d2LsKqfOzLgw%3D%3D",target:"_blank",rel:"noopener noreferrer"},X={href:"https://link.segmentfault.com/?enc=3CG7zGb1qYLW4QdXQF3J0w%3D%3D.0XAN%2Bu%2F5IyqP6kprSIygiuYbbYg0VypycwSTYr1cYJfMzNLC78RM%2FyY%2FHCOafvzsGyghuwvVWOnYjjRUoCXk9DrxbpXMqugtNQuP7lb4sdvMFLcLyQFz%2F5GGWO0w9YHanHY%2B%2Ba99B8xIvvacRr2wsDc5ZQFmpGXZWXnHB7cOJqU%3D",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),K=n("p",null,"最后在回顾下本文学习目标：",-1),Q=n("ol",null,[n("li",null,"合成事件的概念和作用；"),n("li",null,"合成事件与原生事件的 3 个区别；"),n("li",null,"合成事件与原生事件的执行顺序；"),n("li",null,"合成事件的事件池；"),n("li",null,"合成事件 4 个常见问题。")],-1);function G(I,T){const a=o("ExternalLinkIcon");return c(),l("div",null,[b,n("p",null,[s("React 合成事件（SyntheticEvent）是 React "),g,s("，即浏览器原生事件的跨浏览器包装器。它根据 "),n("a",h,[s("W3C 规范"),t(a)]),s(" 来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口。 看个简单示例：")]),f,n("blockquote",null,[n("p",null,[s("本文不介绍源码啦，对具体实现的源码有兴趣的朋友可以查阅："),n("a",y,[s("《React SyntheticEvent》"),t(a)]),s(" 。")])]),_,n("p",null,[s("在 React 中，“合成事件”会以事件委托（"),n("a",R,[s("Event Delegation"),t(a)]),s("）方式绑定在组件最上层，并在组件卸载（unmount）阶段自动销毁绑定的事件。这里我们手写一个简单示例来观察 React 事件和原生事件的执行顺序：")]),w,n("p",null,[s("（图片来自：ReactDeveloper "),n("a",q,[s("https://juejin.cn/post/6844903862285893639"),t(a)]),s("）")]),x,n("p",null,[s("也就是说，在 React 合成事件中，需要阻止冒泡时，可以使用 "),D,s(" 或 "),C,s(" 方法来解决，另外还可以使用 "),n("a",j,[F,t(a)]),s(" 方法解决。")]),E,n("p",null,[s("该方法可以"),B,s("。 在 React 中，一个组件只能绑定一个同类型的事件监听器，当重复定义时，后面的监听器会覆盖之前的。 事实上 nativeEvent 的 "),L,s("只能阻止绑定在 document 上的事件监听器。而合成事件上的 "),n("a",A,[M,t(a)]),s(" 能"),S,s("。")]),O,n("p",null,[s("好了，本文就写到这里，建议大家可以再回去看下官方文档"),n("a",P,[s("《合成事件》"),t(a)]),n("a",N,[s("《事件处理》"),t(a)]),s("章节理解，有兴趣的朋友也可以阅读源码"),n("a",X,[s("《React SyntheticEvent.js》"),t(a)]),s("。")]),W,K,Q])}const V=e(m,[["render",G],["__file","tansuo React hechengshijian.html.vue"]]);export{V as default};
