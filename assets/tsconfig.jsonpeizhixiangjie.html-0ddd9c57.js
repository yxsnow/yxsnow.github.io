import{_ as s,o as n,c as a,a as t}from"./app-ff2f634e.js";const e={},i=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;compilerOptions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;incremental&quot;</span><span class="token builtin class-name">:</span> true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
  <span class="token string">&quot;tsBuildInfoFile&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./buildFile&quot;</span>, // 增量编译文件的存储位置
  <span class="token string">&quot;diagnostics&quot;</span><span class="token builtin class-name">:</span> true, // 打印诊断信息 
  <span class="token string">&quot;target&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ES5&quot;</span>, // 目标语言的版本
  <span class="token string">&quot;module&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CommonJS&quot;</span>, // 生成代码的模板标准
  <span class="token string">&quot;outFile&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./app.js&quot;</span>, // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置<span class="token string">&quot;module&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;AMD&quot;</span>,
  <span class="token string">&quot;lib&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;DOM&quot;</span>, <span class="token string">&quot;ES2015&quot;</span>, <span class="token string">&quot;ScriptHost&quot;</span>, <span class="token string">&quot;ES2019.Array&quot;</span><span class="token punctuation">]</span>, // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入<span class="token string">&quot;ES2019.Array&quot;</span>,
  <span class="token string">&quot;allowJS&quot;</span><span class="token builtin class-name">:</span> true, // 允许编译器编译JS，JSX文件
  <span class="token string">&quot;checkJs&quot;</span><span class="token builtin class-name">:</span> true, // 允许在JS文件中报错，通常与allowJS一起使用
  <span class="token string">&quot;outDir&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./dist&quot;</span>, // 指定输出目录
  <span class="token string">&quot;rootDir&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./&quot;</span>, // 指定输出文件目录<span class="token punctuation">(</span>用于输出<span class="token punctuation">)</span>，用于控制输出目录结构
  <span class="token string">&quot;declaration&quot;</span><span class="token builtin class-name">:</span> true, // 生成声明文件，开启后会自动生成声明文件
  <span class="token string">&quot;declarationDir&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./file&quot;</span>, // 指定生成声明文件存放目录
  <span class="token string">&quot;emitDeclarationOnly&quot;</span><span class="token builtin class-name">:</span> true, // 只生成声明文件，而不会生成js文件
  <span class="token string">&quot;sourceMap&quot;</span><span class="token builtin class-name">:</span> true, // 生成目标文件的sourceMap文件
  <span class="token string">&quot;inlineSourceMap&quot;</span><span class="token builtin class-name">:</span> true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
  <span class="token string">&quot;declarationMap&quot;</span><span class="token builtin class-name">:</span> true, // 为声明文件生成sourceMap
  <span class="token string">&quot;typeRoots&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>, // 声明文件目录，默认时node_modules/@types
  <span class="token string">&quot;types&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>, // 加载的声明文件包
  <span class="token string">&quot;removeComments&quot;</span>:true, // 删除注释 
  <span class="token string">&quot;noEmit&quot;</span><span class="token builtin class-name">:</span> true, // 不输出文件,即编译后不会生成任何js文件
  <span class="token string">&quot;noEmitOnError&quot;</span><span class="token builtin class-name">:</span> true, // 发送错误时不输出任何文件
  <span class="token string">&quot;noEmitHelpers&quot;</span><span class="token builtin class-name">:</span> true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
  <span class="token string">&quot;importHelpers&quot;</span><span class="token builtin class-name">:</span> true, // 通过tslib引入helper函数，文件必须是模块
  <span class="token string">&quot;downlevelIteration&quot;</span><span class="token builtin class-name">:</span> true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
  <span class="token string">&quot;strict&quot;</span><span class="token builtin class-name">:</span> true, // 开启所有严格的类型检查
  <span class="token string">&quot;alwaysStrict&quot;</span><span class="token builtin class-name">:</span> true, // 在代码中注入<span class="token string">&#39;use strict&#39;</span>
  <span class="token string">&quot;noImplicitAny&quot;</span><span class="token builtin class-name">:</span> true, // 不允许隐式的any类型
  <span class="token string">&quot;strictNullChecks&quot;</span><span class="token builtin class-name">:</span> true, // 不允许把null、undefined赋值给其他类型的变量
  <span class="token string">&quot;strictFunctionTypes&quot;</span><span class="token builtin class-name">:</span> true, // 不允许函数参数双向协变
  <span class="token string">&quot;strictPropertyInitialization&quot;</span><span class="token builtin class-name">:</span> true, // 类的实例属性必须初始化
  <span class="token string">&quot;strictBindCallApply&quot;</span><span class="token builtin class-name">:</span> true, // 严格的bind/call/apply检查
  <span class="token string">&quot;noImplicitThis&quot;</span><span class="token builtin class-name">:</span> true, // 不允许this有隐式的any类型
  <span class="token string">&quot;noUnusedLocals&quot;</span><span class="token builtin class-name">:</span> true, // 检查只声明、未使用的局部变量<span class="token punctuation">(</span>只提示不报错<span class="token punctuation">)</span>
  <span class="token string">&quot;noUnusedParameters&quot;</span><span class="token builtin class-name">:</span> true, // 检查未使用的函数参数<span class="token punctuation">(</span>只提示不报错<span class="token punctuation">)</span>
  <span class="token string">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token builtin class-name">:</span> true, // 防止switch语句贯穿<span class="token punctuation">(</span>即如果没有break语句后面不会执行<span class="token punctuation">)</span>
  <span class="token string">&quot;noImplicitReturns&quot;</span><span class="token builtin class-name">:</span> true, //每个分支都会有返回值
  <span class="token string">&quot;esModuleInterop&quot;</span><span class="token builtin class-name">:</span> true, // 允许export<span class="token operator">=</span>导出，由import from 导入
  <span class="token string">&quot;allowUmdGlobalAccess&quot;</span><span class="token builtin class-name">:</span> true, // 允许在模块中全局变量的方式访问umd模块
  <span class="token string">&quot;moduleResolution&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;node&quot;</span>, // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
  <span class="token string">&quot;baseUrl&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./&quot;</span>, // 解析非相对模块的基地址，默认是当前目录
  <span class="token string">&quot;paths&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> // 路径映射，相对于baseUrl
    // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
    <span class="token string">&quot;jquery&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;rootDirs&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span>,<span class="token string">&quot;out&quot;</span><span class="token punctuation">]</span>, // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
  <span class="token string">&quot;listEmittedFiles&quot;</span><span class="token builtin class-name">:</span> true, // 打印输出文件
  <span class="token string">&quot;listFiles&quot;</span><span class="token builtin class-name">:</span> true// 打印编译的文件<span class="token punctuation">(</span>包括引用的声明文件<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),l=[i];function o(u,p){return n(),a("div",null,l)}const r=s(e,[["render",o],["__file","tsconfig.jsonpeizhixiangjie.html.vue"]]);export{r as default};
