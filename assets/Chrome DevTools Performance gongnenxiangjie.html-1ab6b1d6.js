import{_ as c,r as s,o as d,c as r,b as e,d as t,e as i,a as o}from"./app-ff2f634e.js";const n="/assets/58b99aa394da44d78502cfd4f3fdc2c3_a2c79bdc31a44b3ab-e0480e72.webp",l="/assets/14af980117fa401396ed3e93ca6a3e60_e5911b569ba44e81a-76ef4df9.webp",h="/assets/1d7d5e9e876747788b03f0c6a0f2c36d_11658a1b0a4649b28-2d7e585e.webp",p="/assets/f307e264074b4ebd98e98dd70594b315_ce1205d6f35f4a47b-f656c415.webp",b="/assets/448b9fdb5e2246678d1bc20e43fa7c00_0a0eff46f4ec474a8-5b705fe6.webp",_="/assets/433cb439c8b9424aad8915e85ee7032a_5d21472304a74864a-7b766ff3.webp",f="/assets/33a2a80d5e7b4a9e90b84a3cdbb4bd89_180d736b1c6c49f7a-ebd44bbe.webp",m="/assets/04d0ccbdcbc74d30a491f65bdbdae852_5e8253e1232d49469-87b0f5ed.webp",g="/assets/ca4bd9ad8d7745fe94f64a669ff96aa5_2772d8a819a4403a8-1718498b.webp",u="/assets/3724a32f24bb47ec84067e9cab925b1c_72ca5f21d7cb473fa-19e59e92.webp",w="/assets/77bff497f014434f84c3fa7f076ec9d7_cb3b36e5b76d48f99-b680849b.webp",P="/assets/fb57dd713c784627b7416b462989d2d2_62ddb759f3464f818-6eda2a15.webp",S="/assets/640ade3e9cc14c8785bad6794bf4e2b3_42e3be5774264ea88-124a30a5.webp",x="/assets/3be072959d394825bc04907b3bda376d_a326bd6fafd544718-2b2a7394.webp",C="/assets/6224ee1885cc43979bc914b5fb18de97_be21a0a9d342489c9-3c5df0ef.webp",y="/assets/8691949e755b49fa8d12e22192cc5e33_88fa0cd838a74839b-26056fa1.webp",v="/assets/5ce9fdacfb604d17b6982baae92abd1b_a22c6b469c4e4d5d9-06ca5841.webp",T="/assets/267e11d17a0c448597f14fefa36e4932_5d2015be3d6f49e39-31bdcc33.webp",F="/assets/5ee197f1bc2e478c9559bf0dfaa6288b_e03810b895bb4230b-1fbbeb84.webp",k="/assets/4ac7d28abb8446cdb425cc0863715fdb_cca4a390b34d449f9-54aca732.webp",L="/assets/2c7fedb570fb4e5a930eec42de7b570e_3cb2b22e21014761a-af44bb92.webp",U="/assets/35c324daeb514657a9f1bc692d557858_04d51248e25d43c5a-45874cca.webp",M="/assets/ecdc0a9a392a48498cb06a481e3314bc_f2aaefceef13406fb-aace427c.webp",D="/assets/35c324daeb514657a9f1bc692d557858_04d51248e25d43c5a-45874cca.webp",H="/assets/53e9ca1b53da497f9716c30bc8475e0c_d3a767cd49ce4863b-3929c85a.webp",E="/assets/9b38ad8ad9ad405585649512fecc2f2d_b74044cc24f84e639-73e264c5.webp",N="/assets/60560295396a405496a47b7872d8f0de_c7668f7fcbb949bb9-5ef3b9b0.webp",G="/assets/57228c4cef43434488d00ebe74f58b75_3b8b629aef944bc6b-a657b995.webp",O="/assets/fb99defe5ec54b07be7eec6edd5af149_4bcf57387beb49598-7166ab97.webp",J="/assets/c17b7bbe590145c2a10764cc3c793b34_9742cd34b070496ca-cbfd461c.webp",R="/assets/b5360519afe043c0be73411d2207b7ee_02f67066af8f4f8eb-47f6e69d.webp",B="/assets/abd33f82ffdc4212a7f4ba69336db9e7_25be5e33e21f43fc8-c182906e.webp",I="/assets/c380063102ad48b0bf4b245c70bc927e_3fcd03033f4647ce8-1898e27b.webp",j="/assets/62485115b98d46868f4518ba2b363760_43f78b92814443a1b-fb08a66e.webp",A="/assets/0aa5e95ecb0b469a80ecc20a809a2ad6_d6f801c55a26406ba-6ff8b5cc.webp",W="/assets/6e9fc54da0ca416db8fb4edc89056785_244b32ad7737407fa-e15ca0fe.webp",V="/assets/5aa530a1252a4e80a6ba2992e4882272_78e090c338be4755b-5a6cc275.webp",q="/assets/87c3333ecb8c4e9e94e1e6af24ad7cd9_ea2117492e814dba8-631683b4.webp",Y="/assets/991c8904d4c644a392281518377d4211_098c9bb5e2ad4daeb-9f178e9a.webp",z="/assets/8ed1d5857cbf4bc9b06667fd3e57171f_4fd4fcb4535a4fa48-bac26895.webp",Q="/assets/910efcbb7f054fbd84a9f3676e610065_03b8b256e6a94ef79-a8156da4.webp",K="/assets/2fc077be106c4807a3baa6262f5e9b51_22b980e0931445269-7067995f.webp",X="/assets/b3697f37922f40ff8cdfe3ccd7d7e650_1ac0c19ea1a441149-11801311.webp",Z="/assets/47a4535d1ec3473ba7e419794fe9d7a4_28a2b7843a5648358-8edb16fe.webp",$="/assets/82f99ea8466345008026c099836b9698_23c0af7463a8457db-682d1a5c.webp",ee="/assets/4413b90312bc4915ad41d522d71474ac_cddf06dea1e04f019-117067ae.webp",te="/assets/7f124277b4644507a6d554b678b8f1bf_95c4a055944f44018-1440890b.webp",ae="/assets/58479d49a5914e30a478536d3d41321d_d4c5e3ef8f5145179-c9cfc36b.webp",ie="/assets/5cb04dbd005341c0a96cb4b38012f217_d41ad660f8fc4860a-f88c586e.webp",oe="/assets/fe16106942ca4e0988a43a636c2f7d0a_c549edad3a9d4f938-79a049be.webp",ce={},se=o('<h1 id="功能面板概览" tabindex="-1"><a class="header-anchor" href="#功能面板概览" aria-hidden="true">#</a> 功能面板概览</h1><img width="756" height="707" src="'+n+'"><ul><li><p>控制面板（红色区域）：控制性能分析相关功能的配置。</p></li><li><p>概览面板（蓝色区域）：主要性能项目的图形化预览。可选择录制的某一个片段，默认为完整的录制片段。</p></li><li><p>视图面板（绿色区域）：展示<code>概览面板</code>中选择的片段的其他指标数据。点击此面板中的内容可进行选择。</p></li><li><p>详情面板（黄色区域）：展示<code>视图面板</code>中选择内容的详情。其中 <code>Summary</code> 选项卡为点选内容的数据总览，不同的点击项目展示的条目有所区别。而 <code>Bottom-up</code>、<code>Call tree</code>、<code>Event log</code> 选项卡主要与主线程活动相关，会在【Main】中做详细介绍。</p></li></ul><img width="756" height="591" src="'+l+'"><img width="756" height="535" src="'+h+'"><ul><li>搜索框（黑色区域）：按 Command+F (Mac) 或 Control+F（Windows、Linux）打开底部的搜索框，可对 【Main】 中火焰图中的活动进行搜索。</li></ul><h1 id="控制面板" tabindex="-1"><a class="header-anchor" href="#控制面板" aria-hidden="true">#</a> 控制面板</h1><img width="756" height="102" src="'+p+'"><p>红色区域从左至右的功能分别为:</p><ul><li><p><code>Record</code>: 开始/停止记录页面运行时性能，再次点击结束记录并生成分析报告。</p></li><li><p><code>Start profiling and load page</code>: 重新加载页面并记录页面加载时的性能，页面加载完成后会自动停止记录。</p></li><li><p><code>Clear</code>: 清空所有录制的分析内容。</p></li><li><p><code>Load profile</code>：上传之前保存的分析报告。</p></li><li><p><code>Save profile</code>：将当前记录的分析内容以 JSON 文件形式保存。每次记录都会生成一个性能分析报告可供下载；也可截取记录中的某段内容生成分析报告进行保存。</p></li><li><p><code>Show recent timeline sessions</code>: 选择最近的性能分析记录进行显示。</p></li></ul><img width="756" height="249" src="'+b+'"><ul><li><code>Screenshots</code>：是否启用屏幕截图 <strong>。</strong> 启用后将会在录制时捕获每一帧的屏幕截图。</li></ul><img width="756" height="163" src="'+_+'">',13),de=e("code",null,"Memory",-1),re=e("code",null,"NET",-1),ne=e("code",null,"HEAP",-1),le=e("code",null,"HEAP",-1),he=e("code",null,"JS Heap",-1),pe={href:"https://link.juejin.cn?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Fchrome-devtools%2Fmemory-problems",title:"https://developers.google.com/web/tools/chrome-devtools/memory-problems",target:"_blank",rel:"noopener noreferrer"},be=e("code",null,"JS heap",-1),_e=e("img",{width:"756",height:"278",src:f},null,-1),fe=e("code",null,"Web Vitals",-1),me={href:"https://bytedance.feishu.cn/docs/doccnmGVCHeNij9N28hOtUVWBze",target:"_blank",rel:"noopener noreferrer"},ge=o('<p>绿色圆点表示健康表现的指标，黄色小方形、红色菱形则分别中等、较差表现得的指标，如下方左图的 LCP、右图中的 LS（Layout shift）；蓝色矩形表示导致页面卡顿、掉帧的长任务（超过50ms）。</p><p><img width="756" height="243" src="'+m+'"><img width="756" height="310" src="'+g+'"></p><ul><li><code>Collect rubbish</code>: 点击其强制进行垃圾收集。</li></ul><img width="756" height="113" src="'+u+'"><ul><li><code>Disable JavaScript samples</code>: 是否隐藏调用堆栈。默认情况下，<code>Main</code> 中会详细记录 JavaScript 的调用堆栈（👇🏻左图）。</li></ul><p><img width="756" height="738" src="'+w+'"><img width="756" height="591" src="'+P+'"></p>',6),ue=e("li",null,[e("p",null,"Network: 设置网络状况。用于模拟弱网或离线网络状态。")],-1),we={href:"https://bytedance.feishu.cn/docx/doxcnxV06cwY9yie9NbHya9nHsc#doxcnAo8GOOi24eGeqQwa5fl8dc",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://bytedance.feishu.cn/docx/doxcnxV06cwY9yie9NbHya9nHsc#doxcnUO60CGumI20CYXobDYyU8c",target:"_blank",rel:"noopener noreferrer"},Se=e("li",null,[e("p",null,[t("CPU: 设置 CPU 能力。常用于模拟移动设备 CPU，由于移动设备的 CPU 能力远低于 PC，若设置 "),e("code",null,"4x slowdown"),t(" 则表示 DevTools 会限制当前 CPU 使其比现在慢 4 倍。")])],-1),xe=o('<h1 id="概览面板" tabindex="-1"><a class="header-anchor" href="#概览面板" aria-hidden="true">#</a> <strong>概览面板</strong></h1><p>性能面板为FPS，CPU和NET图表数据的概览，在概览上向左或向右拖动鼠标、或点击某区域可选择其中一部分录制内容。</p><img width="756" height="149" src="'+S+'"><h2 id="fps" tabindex="-1"><a class="header-anchor" href="#fps" aria-hidden="true">#</a> FPS</h2><p>每秒帧数。通常情况下 FPS 越高越好，当 FPS &gt;= 60 时页面刷新频率能与大多数浏览器的刷新频率（60Hz）相吻合。<code>FPS</code> 上方出现红色条时就意味着出现长时间帧（帧率下降），从而出现页面卡顿有损用户体验；而绿色条越高则表示 FPS 越高，用户体验越好。</p><img width="756" height="424" src="'+x+'"><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> CPU</h2><p>CPU 资源使用情况。<code>CPU</code> 中面积图如果充满色彩就表示该时间段 CPU 已达到极限。当看到 CPU 长时间处于最大状态时就是需要寻找减少 CPU 工作量方法的提示。</p><img width="756" height="719" src="'+C+'"><p>不同颜色的面积图表示不同的消耗 CPU 资源的事件类型，并且面积图中的各种颜色与 <code>Summary</code> 中的颜色相对应：</p><ul><li><p>蓝色(Loading)：表示网络通信和 HTML 解析时间。</p></li><li><p>黄色(Scripting)：表示 JavaScript 执行时间。</p></li><li><p>紫色(Rendering)：表示样式计算和布局（重排）时间。</p></li><li><p>绿色(Painting)：表示重绘时间。</p></li><li><p>灰色(other)：表示其它事件花费的时间。</p></li><li><p>白色(Idle)：表示空闲时间。</p></li></ul><h2 id="net" tabindex="-1"><a class="header-anchor" href="#net" aria-hidden="true">#</a> NET</h2><p>Network 概览。深蓝色表示存在高优先级的资源请求的时间段，浅蓝色表示存在低优先级的资源请求的时间段。在 【Network】 部分进行详解。</p><img width="756" height="118" src="'+y+'"><h2 id="heap" tabindex="-1"><a class="header-anchor" href="#heap" aria-hidden="true">#</a> HEAP</h2><p>JS heap 使用情况。与开启 <code>Memory</code> 后的 JS heap 线形图一致。</p><img width="756" height="259" src="'+v+'"><h1 id="renderer-process" tabindex="-1"><a class="header-anchor" href="#renderer-process" aria-hidden="true">#</a> Renderer Process</h1>',18),Ce={href:"https://bytedance.feishu.cn/docx/doxcnxV06cwY9yie9NbHya9nHsc#doxcnisIYg0M2AKwicbStZOAmQc",target:"_blank",rel:"noopener noreferrer"},ye=o('<p>Chrome 的多进程架构中，每打开一个页签都会独立运行一个渲染器进程，从而保证某一页签无响应或崩溃不会影响其他页签的活动。</p><p><strong>Chrome 中的进程与分工</strong>：</p><img width="756" height="385" src="'+T+'"><ul><li><p>浏览器进程（Browser Process）：控制 chrome 应用程序，包括地址栏、书签、后退和前进按钮。还处理 Web 浏览器的不可见的特权部分，例如网络请求和文件访问。</p></li><li><p>渲染器进程（Renderer Process）：控制页签中所有内容的显示。</p></li><li><p>插件进程（Plugin Process）：控制网站使用的任何插件，例如 flash。</p></li><li><p>图形处理器进程（GPU Process）：独立于其他进程处理 GPU 任务。</p></li></ul><p><strong>渲染器进程中的线程</strong>：</p><p>渲染器进程包含主线程（main thread）、工作线程（worker threads）、合成线程（compositor thread）和光栅线程（raster thread）。</p><img width="756" height="398" src="'+F+'"><h2 id="页面渲染步骤" tabindex="-1"><a class="header-anchor" href="#页面渲染步骤" aria-hidden="true">#</a> 页面渲染步骤</h2><p>渲染器进程的核心工作是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，主要步骤如下：</p><ol><li><p>DOM 解析（Parsing） 渲染进程解析接收到的HTML数据并转化为DOM对象。</p></li><li><p>样式计算（Style calculation）</p></li></ol><p>主线程根据 CSS 样式选择器计算出的每个DOM元素应具备的具体样式。</p><ol start="3"><li>布局（Layout）</li></ol><p>经过上面的步骤虽然已经知道页面的具体文档结构以及每个节点拥有的样式信息，但仍然不能确定页面最终的样子。布局的过程是计算出每个节点的几何信息。 <img width="756" height="88" src="'+k+'"> 布局过程中主线程会遍历构建的DOM树，根据DOM节点的计算样式计算出一个布局树（layout tree）。 <img width="756" height="398" src="'+L+'"> 布局树上每个节点会有它在页面上的x，y坐标以及盒子大小（bounding box sizes）的具体信息。布局树与先前构建的DOM树差不多，不同的是只有那些可见的节点。</p><ol start="4"><li>分层（Dividing into layers）</li></ol><p>分层的作用确定哪些元素需要放置在哪一图层，此过程主线程会遍历布局树来创建一棵层次树（Layer Tree）。在DevTools中这一部分工作叫做 <code>Update Layer Tree</code>。分层与合成（Compositing）息息相关，在后面详细介绍。</p><p><img width="756" height="108" src="'+U+'"> 5. 绘制 (Paint)</p><p>有了 DOM、样式和布局信息仍不足以呈现页面。比如某些元素设置了<code>z-index</code>，仅按照 HTML 元素的顺序会导致渲染的结果不正确，所以还需要知道绘制的顺序。主线程会遍历之前的布局树（layout tree）来生成一系列的绘画记录（paint records），从而得到了绘制的顺序。 <img width="756" height="398" src="'+M+'"></p><ol start="6"><li>合成（Compositing）</li></ol><p>经过上面的步骤，浏览器知道了文档结构、每个元素的样式、页面的几何形状和绘制顺序。浏览器就可以开始绘制页面。而将这些信息转化为显示器的像素的过程叫做<strong>光栅化</strong>。 光栅化最简单的做法就是只光栅化视口内的内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）光栅化更多的内容以填充缺失的部分👇🏻，最初的 Chrome 就是这么做的。对于现代的浏览器来说采取一种更加复杂的做法，叫做合成（compositing）。合成是一种将页面分成若干层，分别对它们进行光栅化，然后在一个单独的线程 — 合成线程（compositor thread）里合成为一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果👇🏻。动画则可以通过移动图层并合成新帧以相同的方式实现。</p><h2 id="光栅化与合成" tabindex="-1"><a class="header-anchor" href="#光栅化与合成" aria-hidden="true">#</a> 光栅化与合成</h2><p>合成的过程类似 Photoshop 将多个图层按顺序叠加后导出最终的图片，图像发生变更也只需要调整对应的图层。合成的详细过程：</p><ol><li><strong>分层（Dividing into layers）</strong></li></ol><p>合成之前需要主线程先将页面分成若干层。为了确定哪些元素需要放置在哪一层，主线程需要遍历布局树来创建一棵层次树（Layer Tree），在DevTools中这一部分工作叫做 <code>Update Layer Tree</code>。</p><img width="756" height="108" src="'+D+'"><img width="756" height="398" src="'+H+'">',25),ve=e("code",null,"will-change",-1),Te={href:"https://bytedance.feishu.cn/docx/doxcnxV06cwY9yie9NbHya9nHsc#doxcnAo8GOOi24eGeqQwa5fl8dc",target:"_blank",rel:"noopener noreferrer"},Fe=e("code",null,"Layers",-1),ke=o('<p><img src="'+E+'" alt=""><img width="756" height="442" src="'+N+'"></p><ol start="2"><li><strong>光栅化分层</strong></li></ol><p>光栅线程光栅化分层。一旦创建了<code>Layer Tree</code>并确定了绘制顺序，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层，因为页面的一层可能有整个网页那么大，所以合成器进程需要将它们切分为若干的切片然后将每个切片发送给光栅线程（raster thread），光栅线程会光栅化每个切片并且把它们存储在GPU的内存中。</p><img width="756" height="398" src="'+G+'"><p>合成器进程可以对不同的光栅线程进行优先级排序，以便优先对视口内（或附近）的内容进行光栅化。</p><ol start="3"><li><strong>合成</strong></li></ol><p>对切片进行光栅化后，合成器线程会收集切片信息（draw quads）来构建一个合成帧（compositor frame）。</p><ul><li><p><code>draw quads</code>：包含切片在内存的位置以及图层合成后切片在页面的位置信息。</p></li><li><p><code>compositor frame</code>： 绘制一帧内容的 draw quads 集合。</p></li></ul><p>然后通过IPC将合成帧提交给浏览器进程（browser process）。此时 UI 线程或其他渲染器进程也可以添加另外的合成帧，这些合成帧被发送到 GPU 以显示在屏幕上。如果如果出现滚动事件，合成器线程会创建另一个合成帧发送到 GPU 用来更新页面。</p><img width="756" height="398" src="'+O+'">',10),Le={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fen%2Ftutorials%2Fspeed%2Fhigh-performance-animations%2F",title:"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/",target:"_blank",rel:"noopener noreferrer"},Ue=o('<h1 id="视图面板" tabindex="-1"><a class="header-anchor" href="#视图面板" aria-hidden="true">#</a> 视图面板</h1><h2 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h2><p>资源网络请求的瀑布流。不同的颜色用于区分不同的资源类型（HTML、JS、Image等），鼠标悬浮可查看资源请求总耗时和优先级（Highest、High、medium、Low、Lowest）。鼠标点击某个资源请求可以在 <code>Summary</code> 选项卡中查看更详细的信息。</p><img width="756" height="570" src="'+J+'"><p>每个资源请求的图形中都存在一左侧线段、浅色矩形、深色矩形、右侧线段：</p><img width="756" height="197" src="'+R+'"><ul><li><p>左侧线段：Request Sent 之前所有时间花费（Queueing ~ Proxy negotiation，后有详见👇🏻）。</p></li><li><p>浅色矩形：Request Sent + Waiting (TTFB)。从请求发出到浏览器接收到服务端响应的第一个字节花费的时间。</p></li><li><p>深色矩形：Content Download，内容下载耗时。</p></li><li><p>右侧线段：等待主线程的时间花费。</p></li></ul><p>如果想更具体了解该网络请求的耗时分配，可以在 Network 瀑布图中查看该请求的具体时间序列：</p><img width="756" height="605" src="'+B+'">',9),Me=e("li",null,[e("p",null,"Queueing：队列等待时间。以下情况下请求会进行排队："),e("ul",null,[e("li",null,"存在更高优先级的请求；"),e("li",null,"同源仅能打开六个 TCP 连接的限制（仅适用于 HTTP/1.0 和 HTTP/1.1）；"),e("li",null,"浏览器需要在磁盘缓存中短暂分配空间。")])],-1),De=e("li",null,[e("p",null,"Stalled：请求停滞。请求可能因排队中所述的任何原因而停止。")],-1),He=e("li",null,[e("p",null,"DNS Lookup：DNS 查找。浏览器正在解析请求的 IP 地址。")],-1),Ee=e("li",null,[e("p",null,"Initial connection：初始连接。浏览器正在建立连接，包括 TCP 握手/重试和协商 SSL.")],-1),Ne={href:"https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FProxy_server",title:"https://en.wikipedia.org/wiki/Proxy_server",target:"_blank",rel:"noopener noreferrer"},Ge=o("<li><p>Request sent：请求已发送。正在发送请求。</p></li><li><p>ServiceWorker Preparation： ServiceWorker 准备。浏览器正在启动 Service Worker。</p></li><li><p>Request to ServiceWorker： 请求 ServiceWorker。请求正在发送给 service worker.</p></li><li><p>Waiting (TTFB)： 等待（TTFB，Time To First Byte）。浏览器正在等待响应返回的第一个字节，此时间包括 1 次往返延迟和服务器准备响应所用的时间。</p></li><li><p>Content Download：内容下载。浏览器直接从网络或 Service Worker 接收响应。Content Download 表示读取响应内容所花费的总时间。大于预期的值可能表示网络速度较慢，或者浏览器正忙于执行其他工作，从而延迟了响应的读取。</p></li><li><p>Receiving Push：接收推送。浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</p></li><li><p>Reading Push： 读取推送。浏览器正在读取之前接收到的本地数据。</p></li>",7),Oe=e("h2",{id:"frames",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#frames","aria-hidden":"true"},"#"),t(" Frames")],-1),Je=e("code",null,"Summary",-1),Re={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.scinet.utoronto.ca%2Findex.php%2FCPU_time",title:"https://docs.scinet.utoronto.ca/index.php/CPU_time",target:"_blank",rel:"noopener noreferrer"},Be=o('<img width="756" height="488" src="'+I+'"><h3 id="查看分层信息" tabindex="-1"><a class="header-anchor" href="#查看分层信息" aria-hidden="true">#</a> 查看分层信息</h3><ul><li>开启图层信息： <ul><li>控制面板开启 <code>Enable advanced paint instrumentation</code>。</li><li>在 <code>Frames</code> 栏中选择某一帧。</li></ul></li></ul><p>分层信息将在详情面板中的 <code>Layers</code> 选项卡中展示，可查看分层结果是否符合期望：</p><img width="756" height="716" src="'+j+'"><h2 id="interactions" tabindex="-1"><a class="header-anchor" href="#interactions" aria-hidden="true">#</a> Interactions</h2><p>可查找和分析录制期间发生的用户交互。底部的红线表示等待主线程所花费的时间。</p><img width="756" height="674" src="'+A+'"><h2 id="timings" tabindex="-1"><a class="header-anchor" href="#timings" aria-hidden="true">#</a> Timings</h2><p>记录页面加载期间的重要阶段事件及其触发时间点。</p><img width="756" height="380" src="'+W+'"><ul><li><p><code>FP（First Paint）</code>：页面第一个像素渲染到屏幕上所用的时间。</p></li><li><p><code>FCP（First Contentful Paint）</code>：开始绘制内容的时间，内容包括任何文字、图片、非空白的 canvas 或 SVG 等。</p></li></ul><img width="756" height="316" src="'+V+'"><ul><li><p><code>LCP（Largest Contentful Paint）</code>：页面可视区内尺寸最大的元素完成渲染的时间。</p></li><li><p><code>DCL（DOMContentLoaded）</code>: 表示 HTML 已完全加载和解析，此时样式、图像、iframe 等可能尚未加载。</p></li><li><p><code>L（Onload）</code>：页面所有资源加载完成后触发的事件。</p></li></ul><h2 id="raster" tabindex="-1"><a class="header-anchor" href="#raster" aria-hidden="true">#</a> Raster</h2><p>光栅线程，它是浏览器进行光栅化（rasterizing）的进程。</p><img width="756" height="314" src="'+q+'"><p>这里可以帮助我们定位渲染过程中的性能问题。比如同样是压缩后为1M左右的图片，如果它颜色比较单一，压缩后同样可以变得很小，但由于分辨率很高，浏览器解码时的CPU消耗和实际渲染内存消耗可能非常大，从而浏览器直接卡死。Network 中只能看出传输大小（压缩后），Raster 栏则可以定位出问题，如下图中可以看到主线程中有一个13s的长任务导致页面卡死，具体是一个 Composite Layers 任务（Painting类型），因此可在 Raster 中查看具体原因，定位出是两次 <code>Image decode</code> 耗时均在6s以上，从而导致了主线程阻塞，Summary 中可看到具体 Image URL。</p><img width="756" height="584" src="'+Y+'"><h2 id="gpu" tabindex="-1"><a class="header-anchor" href="#gpu" aria-hidden="true">#</a> GPU</h2><p>GPU 任务，鼠标悬浮可查看任务具体耗时。</p><img width="756" height="189" src="'+z+'"><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> Main</h2><p>主线程活动。通过倒置的火焰图展示主线程上发生的活动，x 轴表示随时间的记录。y 轴代表调用堆栈。火焰图中顶部的事件会导致其下方的事件，火焰图顶层宽度越大就表示该活动可能存在性能问题。</p><p>默认情况下，<code>Main</code> 中会详细记录 JavaScript 的调用堆栈，勾选 <code>Disable JavaScript samples</code> 可隐藏其调用堆栈，隐藏后的火焰图明显变低（👇🏻右图）。</p><p><img width="756" height="523" src="'+Q+'"><img width="756" height="304" src="'+K+'"></p><h3 id="查看长任务" tabindex="-1"><a class="header-anchor" href="#查看长任务" aria-hidden="true">#</a> 查看长任务</h3><p>火焰图顶部（根部）由很多任务（Task）组成，使用灰色背景色区分。鼠标悬浮上去可以看到任务的总耗时。而超过50ms 的任务被称之为长任务，会被红色角标标记。因此 Main 视图中可查看导致掉帧的具体任务。</p><img width="756" height="330" src="'+X+'"><h3 id="搜索框" tabindex="-1"><a class="header-anchor" href="#搜索框" aria-hidden="true">#</a> 搜索框</h3><p>按 Command+F (Mac) 或 Control+F（Windows、Linux）打开底部的搜索框，可对火焰图中的活动进行搜索，支持正则。</p><img width="756" height="263" src="'+Z+'"><h3 id="查看火焰图中的活动" tabindex="-1"><a class="header-anchor" href="#查看火焰图中的活动" aria-hidden="true">#</a> 查看火焰图中的活动</h3><p>点击选择火焰图的某一活动或者选择某一时间段的活动，将在详情面板 <code>Summary</code> 选项卡中展示更多信息，结合详情面板的<code>Call tree</code>、<code>Bottom-up</code>、<code>Event log</code> 选项卡可以进行不同维度分析。</p><h4 id="根活动" tabindex="-1"><a class="header-anchor" href="#根活动" aria-hidden="true">#</a> <strong>根活动</strong></h4><p>根活动是指那些导致浏览器做一些工作的活动，例如当单击一个页面时浏览器会触发一个 <code>Event</code> 作为根活动，这个 <code>Event</code> 可能会导致一系列的处理程序执行等。</p><p>根活动位于在火焰图中顶部，Task的下方，也会出现在 <code>Call tree</code>、<code>Event log</code> 选项卡 <code>Activity</code> 列的首行👇🏻。</p><img width="756" height="514" src="'+$+'"><h4 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h4><p>摘要，展示点选活动或某时间段所有活动的各阶段时间耗时。</p><img width="756" height="540" src="'+ee+'"><ul><li><p>Loading：网络请求与解析。</p></li><li><p>Scripting: JS 执行时间。</p></li><li><p>Rendering: 重排，主要包含样式计算、更新布局树、布局、分层等。</p></li><li><p>Painting：重绘。更新分层、光栅化分层、合成等。</p></li><li><p>System: 系统占用时间。</p></li><li><p>Idle: 空闲时间。</p></li><li><p>Total: 总计。</p></li></ul>',42),Ie={href:"https://link.juejin.cn?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F61922993%2Fchrome-devtools-performance-tab-summary",title:"https://stackoverflow.com/questions/61922993/chrome-devtools-performance-tab-summary",target:"_blank",rel:"noopener noreferrer"},je=o('<h4 id="call-tree" tabindex="-1"><a class="header-anchor" href="#call-tree" aria-hidden="true">#</a> Call tree</h4><p>调用树，通常用于查看选择的时间段中导致最多耗时的根活动。</p><p>下图中 <code>Event</code> 是一个根活动，嵌套结构表示表示调用栈，表示 Event 导致了 <code>button.addEventListener</code>，<code>button.addEventListener</code> 中执行了 <code>b</code>...</p><img width="756" height="798" src="'+te+'"><ul><li><p><code>Self Time</code>：该活动直接花费的时间。</p></li><li><p><code>Total Time</code>：该活动和其所有子活动花费的时间。</p></li></ul><h4 id="bottom-up" tabindex="-1"><a class="header-anchor" href="#bottom-up" aria-hidden="true">#</a> Bottom-up</h4><p>自下而上，通常用于查看选择的时间段中直接花费时间最多的活动。</p><img width="756" height="820" src="'+ae+'"><p>上面图例中可以看到几乎所有时间都花在了三个<code>wait()</code>的调用上。因此<code>Bottom-up</code>选项卡中的顶部活动是<code>wait</code>。观察火焰图部分可以<code>wait</code>实际上是数千个<code>Minor GC</code>调用。因此你可以看到在<code>Bottom-up</code>选项卡中下一个最昂贵的活动是<code>Minor GC</code>。</p><ul><li><p><code>Self Time</code>：该活动直接花费的时间的汇总时间，因为其可能出现了多次。</p></li><li><p><code>Total Time</code>：该活动和其所有子活动花费的时间的总时间。</p></li></ul><h4 id="event-log" tabindex="-1"><a class="header-anchor" href="#event-log" aria-hidden="true">#</a> Event log</h4><p>事件日志，用于按照活动的发生顺序查看活动。</p><img width="756" height="770" src="'+ie+'"><ul><li><p><code>Start Time</code>: 该活动的启动时间，它相对于录制的开始时间。</p></li><li><p><code>Self Time</code>：直接在该活动上花费的时间。</p></li><li><p><code>Total Time</code>：直接在该活动及其所有子活动上花费的时间。</p></li></ul><h3 id="paint-分析器" tabindex="-1"><a class="header-anchor" href="#paint-分析器" aria-hidden="true">#</a> <strong>Paint 分析器</strong></h3><ul><li>开启 Paint 分析器： <ul><li>在控制面板开启 <code>Enable advanced paint instrumentation</code>；</li><li>点击选择一个 <code>Paint</code> 事件。</li></ul></li></ul><img width="756" height="262" src="'+oe+'">',17);function Ae(We,Ve){const a=s("ExternalLinkIcon");return d(),r("div",null,[se,e("ul",null,[e("li",null,[de,t("：是否显示内存指标。勾选后会展示一个内存线形图，并且 "),re,t(" 图表下方会展示一个 "),ne,t(" 图。"),le,t(" 图与内存图中 "),he,t(" 的信息相同，表示JS 堆内存，内存飙升可能意味着"),e("a",pe,[t("内存泄漏"),i(a)]),t("，内存不足又可能引发页面崩溃。浏览器在回收内存时还会暂停执行JS，从而使得页面因为 GC（垃圾回收）而出现卡顿或频繁暂停现象。而"),be,t(" 选项右边分别是文档、DOM 节点、监听器和 GPU 内存的内存使用情况，这些内存使用变化可能与JS 执行存在相关性（比如某个事件执行注入了大量的节点）。")])]),_e,e("ul",null,[e("li",null,[fe,t(": 展示能够最快提升当前网页性能表现的核心指标和影响因素，类似一个简易的 "),e("a",me,[t("Ligthouse"),i(a)]),t("。")])]),ge,e("ul",null,[ue,e("li",null,[e("p",null,[t("Enable advanced paint instrumentation(slow): 启用高级绘画工具。用于开启一些高级分析功能，比如"),e("a",we,[t("图层信息"),i(a)]),t("、"),e("a",Pe,[t("Paint 分析器"),i(a)]),t("等。")])]),Se]),xe,e("p",null,[t("视图面板中的功能使用基本都很简单，但理解有一定成本，因此为了更好的介绍视图面板中 Frames、Raster、Main等功能，先对渲染器进程做一下赘叙。也可以直接跳过此内容至"),e("a",Ce,[t("视图面板"),i(a)]),t("。")]),ye,e("p",null,[t("也可以使用 "),ve,t(" CSS 属性告诉浏览器对其单独分层。你甚至可以给页面上所有的元素一个单独的层，但分层并不是越多越好，当页面的层数超过一定数量后，分层的合成操作会比在每帧中光栅化页面的一小部分还要慢。在 "),e("a",Te,[t("Frames"),i(a)]),t(" 或 DevTools "),Fe,t(" 面板中可查看网站如何被分层👇🏻。")]),ke,e("p",null,[t("合成的好处在于它无需涉及主线程即可完成。合成器进程不需要等待样式计算（Style calculation）或 JavaScript 执行。这就是为什么"),e("a",Le,[t("仅通过合成实现动画"),i(a)]),t("是最推荐的方式，能取得最好的性能体验。如果需要重新计算布局（layout）或绘制（paint）则必须涉及到主线程。")]),Ue,e("ul",null,[Me,De,He,Ee,e("li",null,[e("p",null,[t("Proxy negotiation：代理协商。浏览器正在与 "),e("a",Ne,[t("proxy server"),i(a)]),t(" 协商请求。")])]),Ge]),Oe,e("p",null,[t("查看每秒帧数。将鼠标悬停在其中一个绿色方块上会显示该帧的耗时和 FPS，如出现红色方块则表示出现掉帧。点选某帧可在 "),Je,t(" 看到更多信息（触发该帧的相对时间和 "),e("a",Re,[t("CPU time"),i(a)]),t("）。")]),Be,e("p",null,[t("详见"),e("a",Ie,[t("这里"),i(a)]),t("。")]),je])}const Ye=c(ce,[["render",Ae],["__file","Chrome DevTools Performance gongnenxiangjie.html.vue"]]);export{Ye as default};
