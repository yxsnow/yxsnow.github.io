import{_ as e,o as c,c as p,a as o}from"./app-ff2f634e.js";const t="/assets/b98d1d056c953fcd52947fe0362854da-d2ded0db.png",d={},a=o('<p>Header包括三个字段：type、scope和 subject。（scope可选）</p><p><code>git commit -m &#39;fix: #512 bug&#39;</code></p><p><code>git commit -m &#39;feat($login): remember user name&#39;</code></p><h2 id="_1-type" tabindex="-1"><a class="header-anchor" href="#_1-type" aria-hidden="true">#</a> （1）type</h2><p>type用于说明 commit 的类别，只允许使用下面7个标识：</p><p>==feat ： 新功能==</p><p>==fix ： 修补bug==</p><p>==docs：文档==</p><p>==style：格式==</p><p>==refactor：重构==</p><p>==test ： 增加测试==</p><p>==chore：构建过程或辅助工具的变动==</p><p>type为==feat和fix==，该 commit 将出现在 Change log 之中。其他标识可选。</p><h2 id="_2-scope" tabindex="-1"><a class="header-anchor" href="#_2-scope" aria-hidden="true">#</a> （2）scope</h2><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h2 id="_3-subject" tabindex="-1"><a class="header-anchor" href="#_3-subject" aria-hidden="true">#</a> （3）subject</h2><p>subject是 commit 目的的简短描述，不超过50个字符。</p><p><code>//以动词开头，使用第一人称现在时，比如change，而不是changed或changes</code></p><p><code>//第一个字母小写</code></p><p><code>//结尾不加句号（.）</code></p><p>上面的只是一种规范，有工具可以很好的生成commit log，但不遵循也能够提交。但有规范的清晰明了的commit message既便于浏览和查找以及生成commit log，同时也是 一种良好的习惯。</p><p>另外很重要的一点是：</p><p>当我们执行commit命令之后发现有文件未添加或是commit message书写有错误，如果还未push到远端，那么可以使用下面方法进行处理。如果已经push到远端，那么其就无法被修改。</p><p><code>//添加未被添加到暂存区的文件</code></p><p><code>//然后使用--amend</code></p><p><code>git add [filename]</code></p><p><code>git commit --amend</code></p><p><code>//会自动加上已经修改但未被添加到暂存区的文件</code></p><p><code>git commit --amend -a</code></p><p><img src="'+t+'" alt="b98d1d056c953fcd52947fe0362854da.png"></p>',30),i=[a];function s(m,r){return c(),p("div",null,i)}const h=e(d,[["render",s],["__file","gitcaozuoxuexi.html.vue"]]);export{h as default};
