import{_ as e,o as t,c as s,a as o}from"./app-ff2f634e.js";const a={},c=o("<p><code>useState</code> 的坑：</p><p>修改state后，如果直接调用此state，会发现state的值未发生改变。</p><p>当调用setState时，react是<strong>异步更新state</strong>的，如果setState后立即获取state的值，此时state尚未更新，因此为旧的状态。</p><p><code>useRef</code> 总共有两种用法：</p><p>1、获取子组件的实例</p><p>2、在函数组件中的一个<strong>全局变量</strong>，不会因为重复 <code>render</code> 重复申明， 类似于类组件的 <code>this.xxx</code></p><p>有些情况下，我们需要保证函数组件每次 render 之后，某些变量不会被重复申明，比如说 Dom 节点，定时器的 id 等等。</p><p>在类组件中，我们完全可以通过给类添加一个自定义属性来保留，比如说 this.xxx， 但是函数组件没有 this，我们就需要使用 <strong>useRef</strong> 来实现。</p><p>区别：</p><p>1、useState触发重新渲染，useRef不触发。</p><p>2、useState异步更新其值，useRef同步更新。</p>",11),p=[c];function r(n,d){return t(),s("div",null,p)}const _=e(a,[["render",r],["__file","useStateheuseRefdequbie.html.vue"]]);export{_ as default};
