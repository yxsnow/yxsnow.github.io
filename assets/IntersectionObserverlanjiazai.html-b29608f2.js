import{_ as e,r as t,o as p,c as o,b as n,d as s,e as c,a as i}from"./app-ff2f634e.js";const l={},r=i(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><blockquote><p>IntersectionObserver接口(从属于Intersection Observer API)为开发者提供了一种可以异步监听目标元素与其祖先或视窗(viewport)交叉状态的手段。祖先元素与视窗(viewport)被称为根(root)。</p></blockquote><p>这是MDN上给的官方概念，不用去管它，我粘出来只是为了显得专业点嘛...</p><p>重点看这里<strong>监听目标元素与其祖先或视窗交叉状态的手段</strong>，其实就是观察一个元素是否在视窗可见。</p><p><img src="https://upload-images.jianshu.io/upload_images/4060631-17210430f2cbf15c.png?imageMogr2/auto-orient/strip|imageView2/2/w/742/format/webp" alt=""></p><p>是否可见</p><p>可以看到，交叉了就是说明当前元素在视窗里，当前就是可见的了。</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实就是一个简单的构造函数。</p><p>以上代码会返回一个<code>IntersectionObserver</code>实例，<code>callback</code>是当元素的可见性变化时候的回调函数，<code>options</code>是一些配置项（可选）。</p><p>我们使用返回的这个实例来进行一些操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  开始观察，接受一个<span class="token constant">DOM</span>节点对象
io<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>   停止观察 接受一个element元素
io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 关闭观察器 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><p>root</p><p>用于观察的根元素，默认是浏览器的视口，也可以指定具体元素，指定元素的时候用于观察的元素必须是指定元素的子元素</p><p>threshold</p><p>用来指定交叉比例，决定什么时候触发回调函数，是一个数组，默认是<code>[0]</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    threshold<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;img&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码，我们指定了交叉比例为0，0.5，1，当观察元素img0%、50%、100%时候就会触发回调函数</p><p>rootMargin</p><p>用来扩大或者缩小视窗的的大小，使用css的定义方法，<code>10px 10px 30px 20px</code>表示top、right、bottom 和 left的值</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;.box&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    threshold<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    rootMargin<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;30px 100px 20px&#39;</span></span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便理解，我画了张图，如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4060631-ae60b52ea8a52184.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt=""></p><p>options</p><p>首先我们来看下图上的问题，蓝线是什么呢？他就是咱们定义的root元素，我们添加了<code>rootMargin</code>属性，将视窗的增大了，虚线就是现在的视窗，所以元素现在也就在视窗里面了。</p><p>由此可见，root元素只有在<code>rootMargin</code>为空的时候才是绝对的视窗。</p><p>说了简单的options，接下来我们看下<code>callback</code>。</p><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback" aria-hidden="true">#</a> callback</h3><p>上面我们说到，当元素的可见性变化时，就会触发callback函数。</p><p>callback函数会触发两次，元素进入视窗（开始可见时）和元素离开视窗（开始不可见时）都会触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>$0<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，请在chrome控制台进行调试，这里我使用了<code>$0</code>选择了上一次我审查元素的选择的节点</p><p>运行结果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4060631-53a2d2fee0ef61ad.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt=""></p><p>运行结果</p><p>我们可以看到callback函数有个<code>entries</code>参数，它是个<code>IntersectionObserverEntry</code>对象数组，接下来我们重点说下IntersectionObserverEntry对象</p><h3 id="intersectionobserverentry" tabindex="-1"><a class="header-anchor" href="#intersectionobserverentry" aria-hidden="true">#</a> IntersectionObserverEntry</h3><p><code>IntersectionObserverEntry</code>提供观察元素的信息，有七个属性。</p><blockquote><p>boundingClientRect 目标元素的矩形信息 intersectionRatio 相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于0 intersectionRect 目标元素和视窗（根）相交的矩形信息 可以称为相交区域 isIntersecting 目标元素当前是否可见 Boolean值 可见为true rootBounds 根元素的矩形信息，没有指定根元素就是当前视窗的矩形信息 target 观察的目标元素 time 返回一个记录从<code>IntersectionObserver</code>的时间到交叉被触发的时间的时间戳</p></blockquote><p>上面几个矩形信息的关系如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4060631-dfe6e9f2e933ae23.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt=""></p><p>关系.png</p><p>👇 划重点</p><p><strong>intersectionRatio</strong>和<strong>isIntersecting</strong>是用来判断元素是否可见的，押题咯...</p><h3 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h3><p>好了，通过上面一些概念我们大概了解了<code>IntersectionObserver</code>是个什么东西，接下来我们用它来写点代码，写什么呢？没错就是懒加载。</p><p>通过IntersectionObserver来实现懒加载，就简单的多了，我们只需要设置回调，判断当前元素是否可见，再进行渲染操作就行了，而不用去关心内部的计算。</p><p>主要代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">// 实例化 默认基于当前视窗</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span>  

<span class="token keyword">let</span> ings <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-src]&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 将图片的真实url设置为data-src src属性为占位图 元素可见时候替换src</span>

<span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历entries数组</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 当前元素可见</span>
            item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src  <span class="token comment">// 替换src</span>
            io<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">)</span>  <span class="token comment">// 停止观察当前元素 避免不可见时候再次调用callback函数</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">// io.observe接受一个DOM元素，添加多个监听 使用forEach</span>
    io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本想录制个GIF图，使用Recordlt始终上传不了，谁有好用的GIF图录制软件请推荐个，不胜感激。。</p><p>呐，给你花🌹</p>`,53),u={href:"https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2FOrtonzhang%2Fsimple-code%2Ftree%2Fmaster%2Fjavascript%2FIntersectionObserver",target:"_blank",rel:"noopener noreferrer"},d=n("h3",{id:"⚠️注意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#⚠️注意","aria-hidden":"true"},"#"),s(" ⚠️注意")],-1),k=n("p",null,"目前IntersectionObserver是一个实验中的功能，请酌情使用。",-1),m=n("p",null,[n("img",{src:"https://upload-images.jianshu.io/upload_images/4060631-8637bab61b03c04b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp",alt:""})],-1),v=n("p",null,"兼容性",-1);function b(g,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[s("因篇幅有限，完整代码请戳"),n("a",u,[s("github"),c(a)]),s(" 😜")]),d,k,m,v])}const w=e(l,[["render",b],["__file","IntersectionObserverlanjiazai.html.vue"]]);export{w as default};
