import{_ as l,r as a,o as n,c as r,b as e,d as t,e as s,a as d}from"./app-ff2f634e.js";const o="/assets/170af501e710ce67_tplv-t2oaga2asx_d7f8d02c1da746bc9-6cb98be6.webp",c="/assets/170af50e460d9a23_tplv-t2oaga2asx_4ef2b7aa45a042479-60d4ed11.webp",h="/assets/170af5139b7ba71b_tplv-t2oaga2asx_d1980493d90745fcb-2e4d160b.webp",u={},p=d('<h2 id="页面生成的过程" tabindex="-1"><a class="header-anchor" href="#页面生成的过程" aria-hidden="true">#</a> 页面生成的过程：</h2><p>1.HTML 被 HTML 解析器解析成 DOM 树；</p><p>2.CSS 被 CSS 解析器解析成 CSSOM 树；</p><p>3.结合 DOM 树和 CSSOM 树，生成一棵渲染树(Render Tree)，这一过程称为 Attachment；</p><p>4.生成布局(flow)，浏览器在屏幕上“画”出渲染树中的所有节点；</p><p>5.将布局绘制(paint)在屏幕上，显示出整个页面。</p><p>第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的渲染。</p><img width="756" height="296" src="'+o+`" class="jop-noMdConv"><h2 id="渲染" tabindex="-1"><a class="header-anchor" href="#渲染" aria-hidden="true">#</a> 渲染：</h2><p>在页面的生命周期中，<strong>网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断触发重排(reflow)和重绘(repaint)</strong>，不管页面发生了重绘还是重排，都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。</p><h2 id="重排比重绘大" tabindex="-1"><a class="header-anchor" href="#重排比重绘大" aria-hidden="true">#</a> 重排比重绘大：</h2><p>大，在这个语境里的意思是：谁能影响谁？</p><ul><li>重绘：某些元素的外观被改变，例如：元素的填充颜色</li><li>重排：重新生成布局，重新排列元素。</li></ul><p>就如上面的概念一样，单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。</p><p>也就是说：<strong>重绘不一定导致重排，但重排一定会导致重绘</strong>。</p><h2 id="重排-reflow" tabindex="-1"><a class="header-anchor" href="#重排-reflow" aria-hidden="true">#</a> 重排(reflow)：</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念：</h3><p>当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p><p>重排也叫回流，简单的说就是重新生成布局，重新排列元素。</p><h3 id="下面情况会发生重排" tabindex="-1"><a class="header-anchor" href="#下面情况会发生重排" aria-hidden="true">#</a> 下面情况会发生重排：</h3><ul><li>页面初始渲染，这是开销最大的一次重排</li><li>添加/删除可见的DOM元素</li><li>改变元素位置</li><li>改变元素尺寸，比如边距、填充、边框、宽度和高度等</li><li>改变元素内容，比如文字数量，图片大小等</li><li>改变元素字体大小</li><li>改变浏览器窗口尺寸，比如resize事件发生时</li><li>激活CSS伪类（例如：<code>:hover</code>）</li><li>设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow</li><li>查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 <code>getComputedStyle</code>方法，或者IE里的 <code>currentStyle</code> 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。</li></ul><table><thead><tr><th>常见引起重排属性和方法</th><th>–</th><th>–</th><th>–</th></tr></thead><tbody><tr><td>width</td><td>height</td><td>margin</td><td>padding</td></tr><tr><td>display</td><td>border-width</td><td>border</td><td>position</td></tr><tr><td>overflow</td><td>font-size</td><td>vertical-align</td><td>min-height</td></tr><tr><td>clientWidth</td><td>clientHeight</td><td>clientTop</td><td>clientLeft</td></tr><tr><td>offsetWidth</td><td>offsetHeight</td><td>offsetTop</td><td>offsetLeft</td></tr><tr><td>scrollWidth</td><td>scrollHeight</td><td>scrollTop</td><td>scrollLeft</td></tr><tr><td>scrollIntoView()</td><td>scrollTo()</td><td>getComputedStyle()</td><td></td></tr><tr><td>getBoundingClientRect()</td><td>scrollIntoViewIfNeeded()</td><td></td><td></td></tr></tbody></table><h3 id="重排影响的范围" tabindex="-1"><a class="header-anchor" href="#重排影响的范围" aria-hidden="true">#</a> 重排影响的范围：</h3><p>由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：</p><ul><li>全局范围：从根节点html开始对整个渲染树进行重新布局。</li><li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li></ul><p><strong>全局范围重排：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;body&gt;
  &lt;div class=&quot;hello&quot;&gt;
    &lt;h4&gt;hello&lt;/h4&gt;
    &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;BDing&lt;/p&gt;
    &lt;h5&gt;male&lt;/h5&gt;
    &lt;ol&gt;
      &lt;li&gt;coding&lt;/li&gt;
      &lt;li&gt;loving&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/body&gt;
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。</p><p><strong>局部范围重排：</strong></p><p>用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。</p><h2 id="重绘-repaints" tabindex="-1"><a class="header-anchor" href="#重绘-repaints" aria-hidden="true">#</a> 重绘(Repaints):</h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念：</h3><p>当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p><h3 id="常见的引起重绘的属性" tabindex="-1"><a class="header-anchor" href="#常见的引起重绘的属性" aria-hidden="true">#</a> 常见的引起重绘的属性：</h3><table><thead><tr><th>属性：</th><th>–</th><th>–</th><th>–</th></tr></thead><tbody><tr><td>color</td><td>border-style</td><td>visibility</td><td>background</td></tr><tr><td>text-decoration</td><td>background-image</td><td>background-position</td><td>background-repeat</td></tr><tr><td>outline-color</td><td>outline</td><td>outline-style</td><td>border-radius</td></tr><tr><td>outline-width</td><td>box-shadow</td><td>background-size</td><td></td></tr></tbody></table><h2 id="重排优化建议" tabindex="-1"><a class="header-anchor" href="#重排优化建议" aria-hidden="true">#</a> 重排优化建议：</h2><p>重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。下面是一些行之有效的建议，大家可以用来参考。</p><h3 id="减少重排范围" tabindex="-1"><a class="header-anchor" href="#减少重排范围" aria-hidden="true">#</a> 减少重排范围</h3><p>我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。</p><ul><li><p>尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。</p></li><li><p>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。</p></li></ul><h3 id="减少重排次数" tabindex="-1"><a class="header-anchor" href="#减少重排次数" aria-hidden="true">#</a> 减少重排次数</h3><h4 id="_1-样式集中改变" tabindex="-1"><a class="header-anchor" href="#_1-样式集中改变" aria-hidden="true">#</a> 1.样式集中改变</h4><p>不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 <code>cssText</code> 变量中编辑。虽然现在大部分现代浏览器都会有 <code>Flush</code> 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// bad
var left = 10;
var top = 10;
el.style.left = left + &quot;px&quot;;
el.style.top = top + &quot;px&quot;;

// 当top和left的值是动态计算而成时...
// better 
el.style.cssText += &quot;; left: &quot; + left + &quot;px; top: &quot; + top + &quot;px;&quot;;

// better
el.className += &quot; className&quot;;

复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-分离读写操作" tabindex="-1"><a class="header-anchor" href="#_2-分离读写操作" aria-hidden="true">#</a> 2.分离读写操作</h4><p>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// bad 强制刷新 触发四次重排+重绘
div.style.left = div.offsetLeft + 1 + &#39;px&#39;;
div.style.top = div.offsetTop + 1 + &#39;px&#39;;
div.style.right = div.offsetRight + 1 + &#39;px&#39;;
div.style.bottom = div.offsetBottom + 1 + &#39;px&#39;;

// good 缓存布局信息 相当于读写分离 触发一次重排+重绘
var curLeft = div.offsetLeft;
var curTop = div.offsetTop;
var curRight = div.offsetRight;
var curBottom = div.offsetBottom;

div.style.left = curLeft + 1 + &#39;px&#39;;
div.style.top = curTop + 1 + &#39;px&#39;;
div.style.right = curRight + 1 + &#39;px&#39;;
div.style.bottom = curBottom + 1 + &#39;px&#39;;
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原来的操作会导致四次重排，读写分离之后实际上只触发了一次重排，这都得益于浏览器的渲染队列机制：</p><blockquote><p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。</p></blockquote><h4 id="_3-将-dom-离线" tabindex="-1"><a class="header-anchor" href="#_3-将-dom-离线" aria-hidden="true">#</a> 3.将 DOM 离线</h4><p>“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：</p>`,51),v=e("li",null,[e("p",null,"使用 display:none"),e("p",null,[t("一旦我们给元素设置 "),e("code",null,"display:none"),t(" 时（只有一次重排重绘），元素便不会再存在在渲染树中，相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，通过 "),e("code",null,"display"),t("属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。另外，"),e("code",null,"visibility : hidden"),t(" 的元素只对重绘有影响，不影响重排。")])],-1),b={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocumentFragment",title:"https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"dom",-1),f=e("code",null,"dom",-1),g=e("li",null,[e("p",null,"复制节点，在副本上工作，然后替换它！")],-1),x=d(`<h4 id="_4-使用-absolute-或-fixed-脱离文档流" tabindex="-1"><a class="header-anchor" href="#_4-使用-absolute-或-fixed-脱离文档流" aria-hidden="true">#</a> 4.使用 absolute 或 fixed 脱离文档流</h4><p>使用绝对定位会使的该元素单独成为渲染树中 <code>body</code> 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。</p><h4 id="_5-优化动画" tabindex="-1"><a class="header-anchor" href="#_5-优化动画" aria-hidden="true">#</a> 5.优化动画</h4><ul><li><p>可以把动画效果应用到 <code>position</code>属性为 <code>absolute</code> 或 <code>fixed</code> 的元素上，这样对其他元素影响较小。</p><p>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量： 比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多</p></li><li><p>启用GPU加速 <code>GPU</code> 硬件加速是指应用 <code>GPU</code> 的图形性能对浏览器中的一些图形操作交给 <code>GPU</code> 来完成，因为 <code>GPU</code> 是专门为处理图形而设计，所以它在速度和能耗上更有效率。</p><p><code>GPU</code> 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*
  * 根据上面的结论
  * 将 2d transform 换成 3d
  * 就可以强制开启 GPU 加速
  * 提高动画性能
  */
  div {
    transform: translate3d(10px, 10px, 0);
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="如何在浏览器中查看页面渲染时间" tabindex="-1"><a class="header-anchor" href="#如何在浏览器中查看页面渲染时间" aria-hidden="true">#</a> 如何在浏览器中查看页面渲染时间</h2><p>1.打开开发者工具：点击 Performance 左侧有个小圆点 点击刷新页面会录制整个页面加载出来 时间的分配情况。如下图</p><p><img src="`+c+'" alt="image"></p><ul><li>蓝色: 网络通信和HTML解析</li><li>黄色: JavaScript执行</li><li>紫色: 样式计算和布局，即重排</li><li>绿色: 重绘</li></ul><p>哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。</p><p>2.点击 Event Log：单独勾选 Loading 项会显示 html 和 css 加载时间。如下图：</p><p><img src="'+h+'" alt="image"></p><p>3.解析完 DOM+CSSOM 之后会生成一个渲染树 Render Tree，就是 DOM 和 CSSOM 的一一对应关系。</p><p>4.通过渲染树中在屏幕上“画”出的所有节点，称为渲染。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结：</h3><ul><li>渲染的三个阶段 Layout，Paint，Composite Layers。 Layout：重排，又叫回流。 Paint:重绘，重排重绘这些步骤都是在 CPU 中发生的。 Compostite Layers：CPU 把生成的 BitMap（位图）传输到 GPU，渲染到屏幕。</li><li>CSS3 就是在 GPU 发生的：Transform Opacity。在 GPU 发生的属性比较高效。所以 CSS3 性能比较高。</li></ul>',15);function _(y,S){const i=a("ExternalLinkIcon");return n(),r("div",null,[p,e("ul",null,[v,e("li",null,[e("p",null,[t("通过 "),e("a",b,[t("documentFragment"),s(i)]),t(" 创建一个 "),m,t(" 碎片,在它上面批量操作 "),f,t("，操作完成之后，再添加到文档中，这样只会触发一次重排。")])]),g]),x])}const w=l(u,[["render",_],["__file","zhongpai(reflow)hezhonghui(repaint).html.vue"]]);export{w as default};
