import{_ as e,r as o,o as c,c as i,b as n,d as s,e as t,a as p}from"./app-ff2f634e.js";const l={},u=p('<p><strong>防抖和节流的理解，及其应用场景</strong></p><p><strong>01****概 念</strong></p><h3 id="目的-当多次执行某一动作-进行函数调用次数的限制-节省资源" tabindex="-1"><a class="header-anchor" href="#目的-当多次执行某一动作-进行函数调用次数的限制-节省资源" aria-hidden="true">#</a> **目的：**当多次执行某一动作，进行函数调用次数的限制，节省资源</h3><h3 id="防抖-在事件触发n秒后执行函数-如果在n秒内再次出发-重新计时" tabindex="-1"><a class="header-anchor" href="#防抖-在事件触发n秒后执行函数-如果在n秒内再次出发-重新计时" aria-hidden="true">#</a> **防抖：**在事件触发n秒后执行函数，如果在n秒内再次出发，重新计时</h3><h3 id="节流-当多次执行某一动作-每隔一段时间-只执行一次函数。" tabindex="-1"><a class="header-anchor" href="#节流-当多次执行某一动作-每隔一段时间-只执行一次函数。" aria-hidden="true">#</a> **节流：**当多次执行某一动作，每隔一段时间，只执行一次函数。</h3><p><strong>区别：</strong> 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。</p><p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p><p><strong>（ 简要回答 ）</strong></p><p>**防抖：**防止抖动，单位时间内事件触发会被重置，避免事件被误伤触发多次。代码实现重在清零</p>',9),r={href:"https://cloud.tencent.com/product/cvm?from=10680",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("strong",null,"02")],-1),d=n("p",null,[n("strong",null,"应用场景")],-1),v=n("h3",{id:"函数防抖的应用场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数防抖的应用场景","aria-hidden":"true"},"#"),s(),n("strong",null,"函数防抖的应用场景")],-1),m=n("p",null,"连续的事件，只需触发一次回调的场景有：",-1),b={href:"https://cloud.tencent.com/product/sms?from=10680",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"搜索框搜索输入。只需用户最后一次输入完，再发送请求",-1),h=n("li",null,"手机号、邮箱验证输入检测(change、input、blur、keyup等事件触发，每次键入都会触发)",-1),g=n("li",null,"窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。",-1),y=n("li",null,"鼠标的mousemove、mouseover",-1),w=n("li",null,"导航条上，用户不停的在导航区域滑动相当于",-1),_=p(`<h3 id="函数节流的应用场景" tabindex="-1"><a class="header-anchor" href="#函数节流的应用场景" aria-hidden="true">#</a> <strong>函数节流的应用场景</strong></h3><p>间隔一段时间执行一次回调的场景有：</p><ul><li>滚动加载，加载更多或滚到底部监听，window.onscroll和滑到底部自动加载更多</li><li>谷歌搜索框，搜索联想功能</li><li>高频点击提交，表单重复提交</li></ul><p><strong>03</strong></p><p><strong>防抖的实现</strong></p><p>防抖函数（普通）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer<span class="token punctuation">;</span> <span class="token comment">//全局的timer，只有一个</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment">//保证只开启一个定时器</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//延迟delay，执行函数</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">debounce</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;滚动停&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要将timer封装到debounce中，如果调用的fn有参数需要处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//为了改写参数 保存this 应用apply</span>
        <span class="token keyword">let</span> _args <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment">//保存testDebounceFn的入参</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//apply传参正好和arguments匹配</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> testDebounceFn <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;滚动停 &#39;</span><span class="token operator">+</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">testDebounceFn</span><span class="token punctuation">(</span><span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>04</strong></p><p><strong>节流的实现</strong></p><p>节流（2种方式setTimeout 或者 new Date()） 防抖比节流严格，防抖在一定时间操作后只执行一次。节流在一定时间操作，可每隔n秒执行一次</p><p>setTimeout方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> _args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果有定时器，退出</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>_args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定时器结束执行函数</span>
            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//清除定时器，可以再次进入</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> testThrottleFn <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打印 &#39;</span><span class="token operator">+</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">testThrottleFn</span><span class="token punctuation">(</span><span class="token string">&#39;bbbb&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>new Date方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _argus <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
        <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//不同时间取值的new Date()是可以相减的</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>previous<span class="token operator">&gt;</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>_argus<span class="token punctuation">)</span><span class="token punctuation">;</span>
            previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> testThrottleFn <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出现 &#39;</span><span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">testThrottleFn</span><span class="token punctuation">(</span><span class="token string">&#39;8888&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function j(x,T){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("**节流：**控制流量，单位时间内事件只能触发一次，如果"),n("a",r,[s("服务器"),t(a)]),s("端的限流即 Rate Limit。代码实现重在开锁关锁")]),k,d,v,m,n("ul",null,[n("li",null,[s("登录、发"),n("a",b,[s("短信"),t(a)]),s("等按钮避免用户点击太快，以致于发送了多次请求")]),f,h,g,y,w]),_])}const F=e(l,[["render",j],["__file","fangdouhejieliudelijie，jiqiyingyongchangjing.html.vue"]]);export{F as default};
