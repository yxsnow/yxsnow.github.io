import{_ as i,r as n,o as t,c as h,b as a,d,e as p,a as e}from"./app-ff2f634e.js";const l={},s=e('<h1 id="一、白屏时间" tabindex="-1"><a class="header-anchor" href="#一、白屏时间" aria-hidden="true">#</a> 一、白屏时间</h1><p>白屏时间：即用户点击一个链接或打开浏览器输入URL地址后，从屏幕空白到显示第一个画面的时间。</p><h1 id="二、白屏时间的重要性" tabindex="-1"><a class="header-anchor" href="#二、白屏时间的重要性" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>二、白屏时间的重要性</h1><p>当用户点开一个链接或者是直接在浏览器中输入URL开始进行访问时，就开始等待页面的展示。页面渲染的时间越短，用户等待的时间就越短，用户感知到页面的速度就越快。这样可以极大的<strong>提升用户的体验，减少用户的跳出，提升页面的留存率。</strong></p><h1 id="三、白屏的过程" tabindex="-1"><a class="header-anchor" href="#三、白屏的过程" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>三、白屏的过程</h1><p>从输入url，到页面的画面展示的过程</p><p>1、首先，在浏览器地址栏中输入url</p><p>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。</p><p>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。</p><p>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。</p><p>5、握手成功后，浏览器向服务器发送http请求，请求数据包。</p><p>6、服务器处理收到的请求，将数据返回至浏览器</p><p>7、浏览器收到HTTP响应</p><p>8、读取页面内容，浏览器渲染，解析html源码</p><p>9、生成Dom树、解析css样式、js交互,渲染显示页面</p><p>浏览器下载HTML后，首先解析头部代码，进行样式表下载，然后继续向下解析HTML代码，构建DOM树，同时进行样式下载。当DOM树构建完成后，立即开始构造CSSOM树。理想情况下，样式表下载速度够快，DOM树和CSSOM树进入一个并行的过程，当两棵树构建完毕，构建渲染树，然后进行绘制。</p><p>Tips:浏览器安全解析策略对解析HTML造成的影响：</p><p>当解析HTML时遇到内联JS代码，会阻塞DOM树的构建，会先执行完JS代码 ;当CSS样式文件没有下载完成时，浏览器解析HTML遇到了内联JS代码，此时，浏览器暂停JS脚本执行，暂停HTML解析。直到CSS文件下载完成，完成CSSOM树构建，重新恢复原来的解析。</p><p>JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞 JavaScript 的执行，所以在实际的工程中需要重点关注 JavaScript 文件和样式表文件，使用不当会影响到页面性能的。</p>',19),c={href:"https://blog.csdn.net/qq_39903567/article/details/115265394",target:"_blank",rel:"noopener noreferrer"},o=e('<h1 id="四、白屏-性能优化" tabindex="-1"><a class="header-anchor" href="#四、白屏-性能优化" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>四、白屏-性能优化</h1><h2 id="_1-dns解析优化" tabindex="-1"><a class="header-anchor" href="#_1-dns解析优化" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>1. DNS解析优化</h2><p>针对DNS Lookup环节，我们可以针对性的进行DNS解析优化。</p><ul><li>DNS缓存优化</li><li>DNS预加载策略</li><li>稳定可靠的DNS服务器</li></ul><h2 id="_2-tcp网络链路优化" tabindex="-1"><a class="header-anchor" href="#_2-tcp网络链路优化" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>2. TCP网络链路优化</h2><p>多花点钱吧</p><h2 id="_3-服务端处理优化" tabindex="-1"><a class="header-anchor" href="#_3-服务端处理优化" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>3. 服务端处理优化</h2><p>服务端的处理优化，是一个非常庞大的话题，会涉及到如Redis缓存、数据库存储优化或是系统内的各种中间件以及Gzip压缩等…</p><h2 id="_4-浏览器下载、解析、渲染页面优化" tabindex="-1"><a class="header-anchor" href="#_4-浏览器下载、解析、渲染页面优化" aria-hidden="true">#</a> <a href="#"></a><a href="#"></a>4. 浏览器下载、解析、渲染页面优化</h2><p>根据浏览器对页面的下载、解析、渲染过程，可以考虑一下的优化处理：</p><ul><li>尽可能的精简HTML的代码和结构</li><li>尽可能的优化CSS文件和结构</li><li>一定要合理的放置JS代码，尽量不要使用内联的JS代码</li><li>将渲染首屏内容所需的关键CSS内联到HTML中，能使CSS更快速地下载。在HTML下载完成之后就能渲染了，页面渲染的时间提前，从而缩短首屏渲染时间；</li><li>延迟首屏不需要的图片加载，而优先加载首屏所需图片（offsetTop&lt;clientHeight）</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>`document.documentElement.clientHeight//获取屏幕可视区域的高度\nelement.offsetTop//获取元素相对于文档顶部的高度`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞 JavaScript 的执行，所以在实际的工程中需要重点关注 JavaScript 文件和样式表文件，使用不当会影响到页面性能的。</p>',13);function u(S,f){const r=n("ExternalLinkIcon");return t(),h("div",null,[s,a("p",null,[a("a",c,[d("参考:输入url后全过程&&页面渲染机制&&DOM生成过程"),p(r)])]),o])}const x=i(l,[["render",u],["__file","qianduanxingnenyouhua-baipingshijian.html.vue"]]);export{x as default};
